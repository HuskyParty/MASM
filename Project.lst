Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/11/21 21:00:45
<Project 6 - String Primitives and Macros     (Proj6_baxs.as  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_baxs.asm)

				; Author: Scott Bax
				; Last Modified: 10 Aug 2021
				; OSU email address: baxs@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 6    Due Date: 13 Aug 2021
				; Description: 
				;		
				;		
				;		

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;intro macro
				introduction MACRO intro1, intro2
					PUSH		EDX
				  ; title, name and description of program
					MOV			EDX, intro1
					CALL		WriteString
					CALL		Crlf
					CALL		Crlf

					MOV			EDX, intro2
					CALL		WriteString
					CALL		Crlf
					POP			EDX
				ENDM


				mGetString MACRO prompt, userInput, bytesRead, count
					PUSH		EDX
					PUSH		ECX
					PUSH		EAX
				  ; prompt
					MOV			EDX, prompt
					CALL		WriteString
					CALL		Crlf

					MOV			EDX, userInput
					MOV			ECX, count
					call		ReadString
					MOV			userInput, EDX
					MOV			bytesRead, EAX
					POP			EAX
					POP			ECX
					POP			EDX
				ENDM

				mDisplayString MACRO passedString
					PUSH		EDX
				  ; title, name and description of program
					MOV			EDX, passedString
					CALL		WriteString

					POP			EDX
				ENDM


				; Integer Constants
 = 00000002			ARRAYSIZE = 2

 00000000			.data

				; Intro variables
 00000000 53 63 6F 74 74	nameAndTitle	BYTE	"Scott Bax - Project 6 - String Primitives and Macros", 0
	   20 42 61 78 20
	   2D 20 50 72 6F
	   6A 65 63 74 20
	   36 20 2D 20 53
	   74 72 69 6E 67
	   20 50 72 69 6D
	   69 74 69 76 65
	   73 20 61 6E 64
	   20 4D 61 63 72
	   6F 73 00
 00000035 54 68 69 73 20	description		BYTE	"This program will ", 10, 13
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 0A 0D
 00000049  78 0A 0D						BYTE	"x", 10, 13
 0000004C  79 0A 0D						BYTE	"y", 10, 13
 0000004F  7A 0A 0D 00						BYTE	"z", 10, 13, 0
 00000053 00000000		userNumber		SDWORD	?
 00000057 00000000		userNumberSize  SDWORD	?
 0000005B 00000000		userInteger		SDWORD	?
 0000005F 00000000		intToString		SDWORD	?

				; Array variables	
 00000063  00000002 [		intArray		SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]


				; Data variables
				; 2147483647


				; Display variables	
 0000006B 50 6C 65 61 73	enterNumber		BYTE	"Please enter a number that is signed: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 74 68 61
	   74 20 69 73 20
	   73 69 67 6E 65
	   64 3A 20 00
 00000092 48 65 72 65 20	numbersEntered	BYTE	"Here are the numbers you entered: ", 0
	   61 72 65 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 000000B5 4E 6F 74 20 61	wrongNumber		BYTE	"Not a signed number or number too big.", 0
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 20
	   6F 72 20 6E 75
	   6D 62 65 72 20
	   74 6F 6F 20 62
	   69 67 2E 00
 000000DC 20 00			space			BYTE	" ", 0

 00000000			.code
 00000000			main PROC

				; inroduction MACRO
				introduction OFFSET nameAndTitle, OFFSET description
 00000000  52		     1		PUSH		EDX
 00000001  BA 00000000 R     1		MOV			EDX, OFFSET nameAndTitle
 00000006  E8 00000000 E     1		CALL		WriteString
 0000000B  E8 00000000 E     1		CALL		Crlf
 00000010  E8 00000000 E     1		CALL		Crlf
 00000015  BA 00000035 R     1		MOV			EDX, OFFSET description
 0000001A  E8 00000000 E     1		CALL		WriteString
 0000001F  E8 00000000 E     1		CALL		Crlf
 00000024  5A		     1		POP			EDX


 00000025  BF 00000063 R	MOV		EDI, OFFSET intArray
 0000002A  B9 00000002		MOV		ECX, ARRAYSIZE
				; Integer Loop
 0000002F			_integerLoop:
						
						; Gets the user string and converts it to a number
 0000002F  68 000000B5 R			PUSH		OFFSET wrongNumber				
 00000034  68 0000005B R			PUSH		OFFSET userInteger			; return number address
 00000039  68 00000057 R			PUSH		OFFSET userNumberSize
 0000003E  68 00000053 R			PUSH		OFFSET userNumber
 00000043  68 0000006B R			PUSH		OFFSET enterNumber
 00000048  E8 00000058				CALL		Readval
 0000004D  BB 00000000				MOV			EBX, 0
 00000052  8B 1D 0000005B R			MOV			EBX, userInteger
 00000058  89 1F				MOV			[EDI], EBX



						
 0000005A  83 C7 04				ADD		EDI, 4
						
 0000005D  E2 D0				LOOP	_integerLoop


				; -------------------------
				; Display ARRAY Integers 
				; -------------------------

 0000005F  E8 00000000 E	CALL	Crlf
 00000064  BA 00000092 R	MOV		EDX, OFFSET numbersEntered
 00000069  E8 00000000 E	CALL	WriteString					; display variables
 0000006E  E8 00000000 E	CALL	Crlf

				;
 00000073  BF 00000063 R	MOV		EDI, OFFSET intArray
 00000078  B9 00000002		MOV		ECX, ARRAYSIZE				; loop variables
 0000007D			displayLoop:
						
						; pass array item into WriteDec
 0000007D  8B 07				MOV		EAX, [EDI]
								; converts number to string
 0000007F  68 0000005F R			PUSH	OFFSET intToString			; address used in proc
 00000084  50					PUSH	EAX
 00000085  E8 000000E4				CALL	Writeval
 0000008A  BA 000000DC R			MOV		EDX, OFFSET space
 0000008F  E8 00000000 E			call	WriteString
 00000094  83 C7 04				ADD		EDI, 4

 00000097  E2 E4				LOOP displayLoop
 00000099  E8 00000000 E	CALL	Crlf

				; -------------------------
				; Calc/Display Sum 
				; -------------------------


				; -------------------------
				; Calc/Display Average
				; -------------------------
					

					Invoke ExitProcess,0	; exit to operating system
 0000009E  6A 00	   *	    push   +000000000h
 000000A0  E8 00000000 E   *	    call   ExitProcess
 000000A5			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values. EDI changed.
				;
				; Receives:	randArray (reference/input-output), ARRAYSIZE/HI/LO (value/input).
				;
				; Returns: memory variable returned in EAX
				; ---------------------------------------------------------------------------------
 000000A5			Readval PROC
					LOCAL		userNumberProc: SDWORD, userNumberSizeProc: SDWORD, enterNumberProc: SDWORD, userIntegerProc: SDWORD, wrongNumProc: SDWORD


					; preserver registers
 000000A5  55		   *	    push   ebp
 000000A6  8B EC	   *	    mov    ebp, esp
 000000A8  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000000AB  50				PUSH		EAX
 000000AC  51				PUSH		ECX
 000000AD  53				PUSH		EBX
 000000AE  52				PUSH		EDX
 000000AF  57				PUSH		EDI
 000000B0  56				PUSH		ESI

					

 000000B1  8B 55 08			MOV		EDX, [EBP + 8]
 000000B4  89 55 F4			MOV		enterNumberProc, EDX

 000000B7  8B 55 0C			MOV		EDX, [EBP + 12]
 000000BA  89 55 FC			MOV		userNumberProc, EDX

 000000BD  8B 55 10			MOV		EDX, [EBP + 16]
 000000C0  89 55 F8			MOV		userNumberSizeProc, EDX

 000000C3  8B 55 14			MOV		EDX, [EBP + 20]
 000000C6  89 55 F0			MOV		userIntegerProc, EDX

 000000C9  8B 55 18			MOV		EDX, [EBP + 24]
 000000CC  89 55 EC			MOV		wrongNumProc, EDX
					
 000000CF  EB 0F			JMP		_skippWrongMessage
					
 000000D1				_tryAgain:
 000000D1  52					PUSH	EDX
 000000D2  8B 55 EC				MOV		EDX, wrongNumProc
 000000D5  E8 00000000 E			CALL	WriteString
 000000DA  E8 00000000 E			CALL	Crlf
 000000DF  5A					POP		EDX

 000000E0				_skippWrongMessage:
					; get user input
					mGetString enterNumberProc, userNumberProc, userNumberSizeProc, 33
 000000E0  52		     1		PUSH		EDX
 000000E1  51		     1		PUSH		ECX
 000000E2  50		     1		PUSH		EAX
 000000E3  8B 55 F4	     1		MOV			EDX, enterNumberProc
 000000E6  E8 00000000 E     1		CALL		WriteString
 000000EB  E8 00000000 E     1		CALL		Crlf
 000000F0  8B 55 FC	     1		MOV			EDX, userNumberProc
 000000F3  B9 00000021	     1		MOV			ECX, 33
 000000F8  E8 00000000 E     1		call		ReadString
 000000FD  89 55 FC	     1		MOV			userNumberProc, EDX
 00000100  89 45 F8	     1		MOV			userNumberSizeProc, EAX
 00000103  58		     1		POP			EAX
 00000104  59		     1		POP			ECX
 00000105  5A		     1		POP			EDX

 00000106  8B 75 FC			MOV		ESI, userNumberProc
 00000109  8B 7D F0			MOV		EDI, userIntegerProc
 0000010C  8B 4D F8			MOV		ECX, userNumberSizeProc
 0000010F  BB 00000000			MOV		EBX, 0

					
					; transform correct values into integer
 00000114				_checkChar:
 00000114  B8 00000000				MOV		EAX, 0
 00000119  AC					LODSB
 0000011A  2C 30				SUB		AL, 48


						;look for positive or negative
 0000011C  3D 000000FD				CMP		EAX, 253				;minus
 00000121  74 23				JE		_plusOrMinus
						
 00000123  3D 000000FD				CMP		EAX, 253				;minus
 00000128  74 1C				JE		_plusOrMinus

						; check for wrong characters
 0000012A  83 F8 09				CMP		EAX, 9
 0000012D  77 A2				JA		_tryAgain
						
						; continue on
 0000012F  51					PUSH	ECX
 00000130  83 E9 01				SUB		ECX, 1
 00000133  53					PUSH	EBX
 00000134  83 F9 00				cmp		ECX, 0
 00000137  74 09				JE		skipped
 00000139					_int:
 00000139  BB 0000000A					MOV EBX, 10
 0000013E  F7 EB					IMUL EBX
							
 00000140  E2 F7					LOOP _int
 00000142					skipped:
 00000142  5B					POP EBX
 00000143  59					POP ECX
						
 00000144  03 D8				ADD EBX, EAX

						; plus or minus found
 00000146					_plusOrMinus:

 00000146  E2 CC				LOOP _checkChar

 00000148  8B 45 F8			MOV EAX, userNumberSizeProc
 0000014B  8B 55 F0			MOV EDX, userIntegerProc
					
 0000014E  81 FB 7FFFFFFF		CMP	EBX, 2147483647
 00000154  0F 87 FFFFFF77		JA	_tryAgain

 0000015A  89 1A			MOV [EDX], EBX
 0000015C  8B 4D F8			MOV ECX, userNumberSizeProc
 0000015F  8B 55 10			MOV EDX, [EBP + 16]
 00000162  89 0A			MOV [EDX], ECX
					; restore registers
 00000164  5E				POP			ESI
 00000165  5F				POP			EDI
 00000166  5A				POP			EDX
 00000167  5B				POP			EBX
 00000168  59				POP			ECX
 00000169  58				POP			EAX
					
 0000016A  C9		   *	    leave  
 0000016B  C2 0014			RET 20
 0000016E			Readval ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values. EDI changed.
				;
				; Receives:	randArray (reference/input-output), ARRAYSIZE/HI/LO (value/input).
				;
				; Returns: memory variable returned in EAX
				; ---------------------------------------------------------------------------------
 0000016E			Writeval PROC
					LOCAL		intToStringProc: SDWORD, outToStringProc: SDWORD, stringSize: SDWORD


					; preserver registers
 0000016E  55		   *	    push   ebp
 0000016F  8B EC	   *	    mov    ebp, esp
 00000171  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000174  50				PUSH		EAX
 00000175  53				PUSH		EBX
 00000176  51				PUSH		ECX
 00000177  52				PUSH		EDX
 00000178  57				PUSH		EDI
					

 00000179  8B 55 08			MOV			EDX, [EBP + 8]
 0000017C  89 55 FC			MOV			intToStringProc, EDX
					
 0000017F  8B 45 0C			MOV			EAX, [EBP + 12]
 00000182  89 45 F8			MOV			outToStringProc, EAX

 00000185  8B 7D F8			MOV			EDI, outToStringProc

 00000188  8B C2			MOV			EAX, EDX
					
					
 0000018A  B9 00000001			MOV			ECX, 1
 0000018F  FD				STD
 00000190				_intToStringLoop:

 00000190  BB 0000000A				MOV		EBX, 10
 00000195  99					CDQ
 00000196  F7 FB				idiv	EBX

 00000198  83 FA 00				cmp EDX, 0
						
						; if remainder is zero, go to second check to see if int is done
 0000019B  74 17				JE skipped1
 0000019D					skippedBack:
 0000019D  83 C1 01				ADD ECX, 1
						
						
 000001A0  BB 00000000				MOV		EBX, 0
 000001A5  50					PUSH EAX
 000001A6  8B C2				MOV		EAX, EDX
 000001A8  83 C0 30				ADD		EAX, 48
						
 000001AB  AA					STOSB
						
 000001AC  58					POP EAX
						
 000001AD  E2 E1				LOOP _intToStringLoop

					; special case if there is a digit with a zero, does not terminate wrongly
 000001AF  B8 00000001			MOV EAX, 1
 000001B4				skipped1:
 000001B4  83 F8 00				cmp EAX, 0
 000001B7  75 E4				JNE skippedBack
 000001B9  FC				CLD
 000001BA  89 7D F8			MOV outToStringProc, EDI
 000001BD  83 45 F8 01			ADD outToStringProc, 1
					mDisplayString outToStringProc
 000001C1  52		     1		PUSH		EDX
 000001C2  8B 55 F8	     1		MOV			EDX, outToStringProc
 000001C5  E8 00000000 E     1		CALL		WriteString
 000001CA  5A		     1		POP			EDX
					;call WriteString
					
 000001CB  5F				POP			EDI
 000001CC  5A				POP			EDX
 000001CD  59				POP			ECX
 000001CE  5B				POP			EBX
 000001CF  58				POP			EAX


 000001D0  C9		   *	    leave  
 000001D1  C2 0008			RET 8
 000001D4			Writeval ENDP
Proj6_baxs.asm(365) : warning A6004:procedure argument or local not referenced : stringSize

				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/11/21 21:00:45
<Project 6 - String Primitives and Macros     (Proj6_baxs.as  Symbols 2 - 1




Macros:

                N a m e                 Type

introduction . . . . . . . . . .	Proc
mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000DE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001D4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Readval  . . . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 000000C9 Public STDCALL
  userNumberProc . . . . . . . .	DWord	 bp - 00000004
  userNumberSizeProc . . . . . .	DWord	 bp - 00000008
  enterNumberProc  . . . . . . .	DWord	 bp - 0000000C
  userIntegerProc  . . . . . . .	DWord	 bp - 00000010
  wrongNumProc . . . . . . . . .	DWord	 bp - 00000014
  _tryAgain  . . . . . . . . . .	L Near	 000000D1 _TEXT	
  _skippWrongMessage . . . . . .	L Near	 000000E0 _TEXT	
  _checkChar . . . . . . . . . .	L Near	 00000114 _TEXT	
  _int . . . . . . . . . . . . .	L Near	 00000139 _TEXT	
  skipped  . . . . . . . . . . .	L Near	 00000142 _TEXT	
  _plusOrMinus . . . . . . . . .	L Near	 00000146 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Writeval . . . . . . . . . . . .	P Near	 0000016E _TEXT	Length= 00000066 Public STDCALL
  intToStringProc  . . . . . . .	DWord	 bp - 00000004
  outToStringProc  . . . . . . .	DWord	 bp - 00000008
  stringSize . . . . . . . . . .	DWord	 bp - 0000000C
  _intToStringLoop . . . . . . .	L Near	 00000190 _TEXT	
  skippedBack  . . . . . . . . .	L Near	 0000019D _TEXT	
  skipped1 . . . . . . . . . . .	L Near	 000001B4 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A5 Public STDCALL
  _integerLoop . . . . . . . . .	L Near	 0000002F _TEXT	
  displayLoop  . . . . . . . . .	L Near	 0000007D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000002h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 00000035 _DATA	
enterNumber  . . . . . . . . . .	Byte	 0000006B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 00000063 _DATA	
intToString  . . . . . . . . . .	DWord	 0000005F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nameAndTitle . . . . . . . . . .	Byte	 00000000 _DATA	
numbersEntered . . . . . . . . .	Byte	 00000092 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000000DC _DATA	
userInteger  . . . . . . . . . .	DWord	 0000005B _DATA	
userNumberSize . . . . . . . . .	DWord	 00000057 _DATA	
userNumber . . . . . . . . . . .	DWord	 00000053 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrongNumber  . . . . . . . . . .	Byte	 000000B5 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
