Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/05/21 10:06:18
<Project 5 - Genorating, Sorting, Counting Random Ints     (  Page 1 - 1


				TITLE Project 5 - Genorating, Sorting, Counting Random Ints     (Proj5_baxs.asm)

				; Author: Scott Bax
				; Last Modified: 5 Aug 2021
				; OSU email address: baxs@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 5    Due Date: 8 Aug 2021
				; Description: Program that generates an array with 200 random integers between 10-29
				;		The program displays the list first unsorted. It then /calculates/displays the median value
				;		of the array. It then sorts/displays array in ascending order. It then generates/
				;		displays another array holding the number of times each random number was displayed.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Integer Constants
 = 000000C8			ARRAYSIZE = 200
 = 0000000A			LO = 10
 = 0000001D			HI = 29
 = 20				COUNTSIZE		TEXTEQU %(HI - LO) + 1

 00000000			.data

				; Intro variables
 00000000 53 63 6F 74 74	nameAndTitle	BYTE	"Scott Bax - Project 5 - Random Integer Array Generator/Manipulator", 0
	   20 42 61 78 20
	   2D 20 50 72 6F
	   6A 65 63 74 20
	   35 20 2D 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 20 41
	   72 72 61 79 20
	   47 65 6E 65 72
	   61 74 6F 72 2F
	   4D 61 6E 69 70
	   75 6C 61 74 6F
	   72 00
 00000043 54 68 69 73 20	description		BYTE	"This program generates an array with 200 random integers between 10-29", 10, 13
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 61 6E
	   20 61 72 72 61
	   79 20 77 69 74
	   68 20 32 30 30
	   20 72 61 6E 64
	   6F 6D 20 69 6E
	   74 65 67 65 72
	   73 20 62 65 74
	   77 65 65 6E 20
	   31 30 2D 32 39
	   0A 0D
 0000008B  61 6E 64 20 64					BYTE	"and displays the list first unsorted. It then /calculates/displays the median value", 10, 13
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6C 69 73
	   74 20 66 69 72
	   73 74 20 75 6E
	   73 6F 72 74 65
	   64 2E 20 49 74
	   20 74 68 65 6E
	   20 2F 63 61 6C
	   63 75 6C 61 74
	   65 73 2F 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 0A 0D
 000000E0  6F 66 20 74 68					BYTE	"of the array. It then sorts/displays array in ascending order. It then generates/", 10, 13
	   65 20 61 72 72
	   61 79 2E 20 49
	   74 20 74 68 65
	   6E 20 73 6F 72
	   74 73 2F 64 69
	   73 70 6C 61 79
	   73 20 61 72 72
	   61 79 20 69 6E
	   20 61 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 20 49 74
	   20 74 68 65 6E
	   20 67 65 6E 65
	   72 61 74 65 73
	   2F 0A 0D
 00000133  64 69 73 70 6C					BYTE	"displays another array holding the number of times each random number was displayed.", 10, 13, 0
	   61 79 73 20 61
	   6E 6F 74 68 65
	   72 20 61 72 72
	   61 79 20 68 6F
	   6C 64 69 6E 67
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   74 69 6D 65 73
	   20 65 61 63 68
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 64
	   69 73 70 6C 61
	   79 65 64 2E 0A
	   0D 00


				; Array variables	
 0000018A  000000C8 [		randArray		DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 000004AA  00000014 [		countArray		DWORD	COUNTSIZE DUP(?)
	    00000000
	   ]

				; Display variables	
 000004FA 20 00			space			BYTE	" ", 0
 000004FC 55 6E 73 6F 72	unsorted		BYTE	"Unsorted random numbers are: ", 0
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 3A 20 00
 0000051A 53 6F 72 74 65	sorted			BYTE	"Sorted random numbers are: ", 0
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   3A 20 00
 00000536 4D 65 64 69 61	median			BYTE	"Median value of the array is: ", 0
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   61 72 72 61 79
	   20 69 73 3A 20
	   00
 00000555 54 68 65 20 61	counted			BYTE	"The amount each random occurs starting at 10 is: ", 0
	   6D 6F 75 6E 74
	   20 65 61 63 68
	   20 72 61 6E 64
	   6F 6D 20 6F 63
	   63 75 72 73 20
	   73 74 61 72 74
	   69 6E 67 20 61
	   74 20 31 30 20
	   69 73 3A 20 00
 00000587 54 68 61 6E 6B	byeMessage		BYTE	"Thanks for using this program. See ya!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 2E
	   20 53 65 65 20
	   79 61 21 00

 00000000			.code
 00000000			main PROC

					; Intro
 00000000  68 00000000 R		PUSH		OFFSET nameAndTitle 
 00000005  68 00000043 R		PUSH		OFFSET description
 0000000A  E8 000000A7			CALL		introduction

					; Fill array
 0000000F  68 0000018A R		PUSH		OFFSET randArray
 00000014  6A 0A			PUSH		LO
 00000016  6A 1D			PUSH		HI
 00000018  68 000000C8			PUSH		ARRAYSIZE
 0000001D  E8 000000BA			CALL		fillArray

					; Display unsorted array
 00000022  68 000004FC R		PUSH		OFFSET unsorted
 00000027  68 000004FA R		PUSH		OFFSET space
 0000002C  68 0000018A R		PUSH		OFFSET randArray
 00000031  68 000000C8			PUSH		ARRAYSIZE
 00000036  E8 00000134			CALL		displayList

					; Sort array
 0000003B  68 0000018A R		PUSH		OFFSET randArray
 00000040  68 000000C8			PUSH		ARRAYSIZE
 00000045  E8 000000C2			CALL		sortList

					; Display median
 0000004A  68 00000536 R		PUSH		OFFSET median
 0000004F  68 0000018A R		PUSH		OFFSET randArray
 00000054  68 000000C8			PUSH		ARRAYSIZE
 00000059  E8 00000168			CALL		displayMedian

					; Display array
 0000005E  68 0000051A R		PUSH		OFFSET sorted
 00000063  68 000004FA R		PUSH		OFFSET space
 00000068  68 0000018A R		PUSH		OFFSET randArray
 0000006D  68 000000C8			PUSH		ARRAYSIZE
 00000072  E8 000000F8			CALL		displayList

					; Count list
 00000077  68 000004AA R		PUSH		OFFSET countArray
 0000007C  68 0000018A R		PUSH		OFFSET randArray
 00000081  6A 0A			PUSH		LO
 00000083  6A 1D			PUSH		HI
 00000085  68 000000C8			PUSH		ARRAYSIZE
 0000008A  E8 00000186			CALL		countList

					; Display array
 0000008F  68 00000555 R		PUSH		OFFSET counted
 00000094  68 000004FA R		PUSH		OFFSET space
 00000099  68 000004AA R		PUSH		OFFSET countArray
 0000009E  6A 14			PUSH		COUNTSIZE
 000000A0  E8 000000CA			CALL		displayList

					; Bye
 000000A5  68 00000587 R		PUSH		OFFSET byeMessage
 000000AA  E8 000001C2			CALL		bye

					Invoke ExitProcess,0	; exit to operating system
 000000AF  6A 00	   *	    push   +000000000h
 000000B1  E8 00000000 E   *	    call   ExitProcess

 000000B6			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				; 
				; The procedure displays programmer name and program description to user. 
				;
				; Preconditions: nameAndTitle/description exist as strings.
				;
				; Postconditions: EDX changed.
				;
				; Receives:	nameAndTitle/description (reference/input).
				;
				; Returns: None.
				; ---------------------------------------------------------------------------------
 000000B6			introduction PROC
					
					; preserve EBP register and set it up as stack pointer
 000000B6  55				PUSH		EBP
 000000B7  8B EC			MOV			EBP, ESP
					
					; title, name and description of program
 000000B9  8B 55 0C			MOV			EDX, [EBP + 12]
 000000BC  E8 00000000 E		CALL		WriteString
 000000C1  E8 00000000 E		CALL		Crlf
 000000C6  E8 00000000 E		CALL		Crlf

 000000CB  8B 55 08			MOV			EDX, [EBP + 8]
 000000CE  E8 00000000 E		CALL		WriteString
 000000D3  E8 00000000 E		CALL		Crlf

					; restore EBP register
 000000D8  5D				POP			EBP

 000000D9  C2 0008			RET 8
 000000DC			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values. EDI changed.
				;
				; Receives:	randArray (reference/input-output), ARRAYSIZE/HI/LO (value/input).
				;
				; Returns: someArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 000000DC			fillArray PROC
					
					; preserve EBP register and set it up as stack pointer
 000000DC  55				PUSH		EBP
 000000DD  8B EC			MOV			EBP, ESP

					; preserver registers
 000000DF  50				PUSH		EAX
 000000E0  51				PUSH		ECX
 000000E1  57				PUSH		EDI

					; set loop & EDI for loop reference
 000000E2  8B 4D 08			MOV			ECX, [EBP + 8]
 000000E5  8B 7D 14			MOV			EDI, [EBP + 20]

					; set seed value for randomizing number
 000000E8  E8 00000000 E		CALL	Randomize

					; loop to fill array
 000000ED				fillLoop:
						
						; Generate random number by using HI & LO
						; Since RandomRange Initializes at zero mus subtract LO from HI
						; then generate number and add LO back to HI
 000000ED  8B 45 0C				MOV		EAX, [EBP + 12]
 000000F0  2B 45 10				SUB		EAX, [EBP + 16]
 000000F3  83 C0 01				ADD		EAX, 1				; RandomRange upper limit exclusive

 000000F6  E8 00000000 E			CALL	RandomRange
 000000FB  03 45 10				ADD		EAX, [EBP + 16]		; add back Lo


 000000FE  89 07				MOV		[EDI], EAX
 00000100  83 C7 04				ADD		EDI, 4				; put random val in array and increment to next index

 00000103  E2 E8				LOOP	fillLoop


					; restore registers
 00000105  5F				POP			EDI
 00000106  59				POP			ECX
 00000107  58				POP			EAX

					; restore EBP register
 00000108  5D				POP			EBP

 00000109  C2 0010			RET 16
 0000010C			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: sortList
				; 
				; The procedure sorts an array of ARRAYSIZE in ascending order.

				; Preconditions: randArray and ARRAYSIZE exist
				;
				; Postconditions: randArray sorted in ascending order. EDI changed.
				;
				; Receives:	randArray (reference/input), ARRAYSIZE (value/input)
				;
				; Returns: randArray sorted in ascending order.
				; ---------------------------------------------------------------------------------
 0000010C			sortList PROC
					
					; preserve EBP register and set it up as stack pointer
 0000010C  55				PUSH		EBP
 0000010D  8B EC			MOV			EBP, ESP

					; preserve registers
 0000010F  50				PUSH		EAX
 00000110  53				PUSH		EBX
 00000111  51				PUSH		ECX
 00000112  57				PUSH		EDI

 00000113				backToSortLoop:
					; set loop & EDI for loop reference
 00000113  8B 4D 08			MOV			ECX, [EBP + 8]
 00000116  83 E9 01			SUB			ECX, 1					; due to exchangeg call procedure, 
 00000119  8B 7D 0C			MOV			EDI, [EBP + 12]
 0000011C  BB 00000000			MOV			EBX, 0					; tracks how many exchanges occur

					; loop to sort arrat by exchanges 
 00000121				sortLoop:   

						; Set up array elements for compare and possible pass to exchange procedure
 00000121  53					PUSH	EBX
 00000122  8B 07				MOV		EAX, [EDI]
						
 00000124  83 C7 04				ADD		EDI, 4
 00000127  8B 1F				MOV		EBX, [EDI]
 00000129  83 EF 04				SUB		EDI, 4			; restore EDI back
						

 0000012C  3B C3				CMP		EAX, EBX
 0000012E  5B					POP		EBX
 0000012F  76 0D				JNA		noExchangeNeeded

						; restore and increment EBX since exchange will occur
						
 00000131  83 C3 01				ADD		EBX, 1

						; exhange elements in array if left > right
 00000134  57					PUSH		EDI
 00000135  83 C7 04				ADD			EDI, 4
 00000138  57					PUSH		EDI
 00000139  E8 00000012				CALL		exchangeElements  

 0000013E					noExchangeNeeded:

 0000013E  83 C7 04				ADD		EDI, 4				;increment to next index
 00000141  E2 DE				LOOP	sortLoop
					
 00000143  83 FB 00			CMP			EBX, 0
 00000146  75 CB			JNE			backToSortLoop


					; restore registers
 00000148  5F				POP			EDI
 00000149  59				POP			ECX
 0000014A  5B				POP			EBX
 0000014B  58				POP			EAX

					; restore EBP register
 0000014C  5D				POP			EBP

 0000014D  C2 0008			RET 8
 00000150			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements  
				; 
				; The procedure will exchange two passed elements in an array by moving places with them. 
				;
				; Preconditions: randArray and the passed elements exist. 
				;
				; Postconditions: randArray is updated with the two passed elments places switched. EDX/EDI changed. 
				;
				; Receives:	randArray[first index] (reference/input-output), randArray[second index] (reference/input-output)
				;
				; Returns: randArray is updated with the two passed elments places switched
				; ---------------------------------------------------------------------------------
 00000150			exchangeElements PROC
					
					; preserve EBP register and set it up as stack pointer
 00000150  55				PUSH		EBP
 00000151  8B EC			MOV			EBP, ESP

					; preserver registers

 00000153  53				PUSH		EBX
 00000154  51				PUSH		ECX


					; set registers with first and second index
 00000155  8B 7D 08			MOV			EDI, [EBP + 8]		; second index put in register for switch
 00000158  8B 0F			MOV			ECX, [EDI]

 0000015A  8B 7D 0C			MOV			EDI, [EBP + 12]		; first index put in register for switch
 0000015D  8B 1F			MOV			EBX, [EDI]

 0000015F  8B 7D 08			MOV			EDI, [EBP + 8]		; switch
 00000162  89 1F			MOV			[EDI], EBX

 00000164  8B 7D 0C			MOV			EDI, [EBP + 12]		; switch
 00000167  89 0F			MOV			[EDI], ECX


					; restore registers
 00000169  59				POP			ECX
 0000016A  5B				POP			EBX


					; restore EBP register
 0000016B  5D				POP			EBP

 0000016C  C2 0008			RET 8
 0000016F			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: randArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: randArray is updated with new random values, EDX/EDI changed
				;
				; Receives:	randArray passed by referenece as input/output. LO, HI, ARRAYSIZE passed by value. space passed by reference.
				;
				; Returns: randArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 0000016F			displayList PROC
					
					; preserve EBP register and set it up as stack pointer
 0000016F  55				PUSH		EBP
 00000170  8B EC			MOV			EBP, ESP

					; preserver registers
 00000172  50				PUSH		EAX
 00000173  53				PUSH		EBX
 00000174  51				PUSH		ECX
 00000175  57				PUSH		EDI

					; set loop & EDI for loop reference/set EDX for writeString
 00000176  8B 4D 08			MOV			ECX, [EBP + 8]
 00000179  8B 7D 0C			MOV			EDI, [EBP + 12]
 0000017C  8B 55 14			MOV			EDX, [EBP + 20]

					; display title message
 0000017F  E8 00000000 E		CALL		WriteString
 00000184  E8 00000000 E		CALL		Crlf

					; used to track numbers per line
 00000189  BB 00000000			MOV			EBX, 0 
					
					
					; loop to display array
 0000018E				displayLoop:
						
						; pass array item into WriteDec
 0000018E  8B 07				MOV		EAX, [EDI]
 00000190  83 FB 14				CMP		EBX, 20

 00000193  75 0A				JNE		skipLineReset		; if there are 20 numbers make new line
 00000195  BB 00000000				MOV		EBX, 0 
 0000019A  E8 00000000 E			CALL	Crlf	

 0000019F					skipLineReset:
 0000019F  E8 00000000 E			CALL	WriteDec			; display number

 000001A4  8B 55 10				MOV		EDX, [EBP + 16]
 000001A7  E8 00000000 E			CALL	WriteString			; display space


 000001AC  83 C7 04				ADD		EDI, 4				;increment to next index
 000001AF  83 C3 01				ADD		EBX, 1
 000001B2  E2 DA				LOOP	displayLoop


					; New line
 000001B4  E8 00000000 E		CALL	Crlf
 000001B9  E8 00000000 E		CALL	Crlf
					
					; restore registers
 000001BE  5F				POP			EDI
 000001BF  59				POP			ECX
 000001C0  5B				POP			EBX
 000001C1  58				POP			EAX

					; restore EBP register
 000001C2  5D				POP			EBP

 000001C3  C2 0010			RET 16
 000001C6			displayList ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian 
				; 
				; The procedure calculates/displays the median number off all the numbers in the sorted randArray. 
				;
				; Preconditions: (sorted) randArray, median, ARRAYSIZE exist. 
				;
				; Postconditions: EDX/EDI changed 
				;
				; Receives:	randArray (reference/input), median (references/input), ARRAYSIZE (value/input)
				;
				; Returns: None. 
				; ---------------------------------------------------------------------------------
 000001C6			displayMedian PROC
					
					; preserve EBP register and set it up as stack pointer
 000001C6  55				PUSH		EBP
 000001C7  8B EC			MOV			EBP, ESP

					; preserver registers
 000001C9  50				PUSH		EAX
 000001CA  53				PUSH		EBX
 000001CB  51				PUSH		ECX
 000001CC  57				PUSH		EDI

					; set loop & EDI for loop reference/set EDX for writeString
 000001CD  8B 4D 08			MOV			ECX, [EBP + 8]
 000001D0  8B 7D 0C			MOV			EDI, [EBP + 12]
 000001D3  8B 55 10			MOV			EDX, [EBP + 16]

					; display message
 000001D6  E8 00000000 E		CALL		WriteString

					;calculate average by dividing sum by valid numbers
 000001DB  8B C1			MOV			EAX, ECX
 000001DD  BB 00000002			MOV			EBX, 2
 000001E2  99				CDQ
 000001E3  F7 F3			DIV			EBX

					;find difference between remainder and divsor
 000001E5  BB 00000002			MOV		EBX, 2
 000001EA  2B DA			SUB		EBX, EDX

					;calculate average by dividing by divisor
 000001EC  3B D8			cmp		EBX, EAX
 000001EE  7C 07			jl		skip_rounding_up
 000001F0  BB FFFFFFFF			mov		EBX, -1
 000001F5  03 C3			add		EAX, EBX

					;rounding up got skipped
 000001F7				skip_rounding_up:

					;Median in EAX
 000001F7  6B C0 04			IMUL	EAX, 4
					

 000001FA  03 F8			ADD		EDI, EAX

 000001FC  8B 07			MOV     EAX, [EDI]

 000001FE  E8 00000000 E		CALL	WriteDec


					

					; New line
 00000203  E8 00000000 E		CALL	Crlf
 00000208  E8 00000000 E		CALL	Crlf
					
					; restore registers
 0000020D  5F				POP			EDI
 0000020E  59				POP			ECX
 0000020F  5B				POP			EBX
 00000210  58				POP			EAX

					; restore EBP register
 00000211  5D				POP			EBP

 00000212  C2 000C			RET 12
 00000215			displayMedian  ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				; 
				; The procedure iterates over a list, counts the amount of occurences of each number
				; and adds that amount to a new array.
				;
				; Preconditions: randArray, LO, HI, counted, countArray, and COUNTSIZE exist.
				;
				; Postconditions: countArray is updated with the amount of occurences for each different number. EDI/ESI changed. 
				;
				; Receives:	randArray (reference/input), countArray (referenece input/output), LO, HI, COUNTSIZE (value/input)
				;
				; Returns: countArray updated with the amount of occurences for each different number. 
				; ---------------------------------------------------------------------------------
 00000215			countList PROC
					
					; preserve EBP register and set it up as stack pointer
 00000215  55				PUSH		EBP
 00000216  8B EC			MOV			EBP, ESP

					; preserver registers
 00000218  50				PUSH		EAX
 00000219  53				PUSH		EBX
 0000021A  51				PUSH		ECX
 0000021B  52				PUSH		EDX
 0000021C  57				PUSH		EDI

					; set loop & EDI for loop reference
 0000021D  8B 4D 08			MOV			ECX, [EBP + 8]

					; set countList
 00000220  8B 75 18			MOV			ESI, [EBP + 24]
 00000223  83 EE 04			SUB			ESI, 4

					; starte value for rand array, and set occurence counter
 00000226  8B 7D 14			MOV			EDI, [EBP + 20]	
 00000229  83 EF 04			SUB			EDI, 4
 0000022C  8B 07			MOV			EAX, [EDI]
 0000022E  BB FFFFFFFF	MOV			EBX, -1
 00000233  8B 55 10			MOV			EDX, [EBP + 16]		

					; loop to fill array
 00000236				countLoop:
						
 00000236  83 C7 04				ADD		EDI, 4
 00000239  8B 07				MOV		EAX, [EDI]			; current randArray Index stored in EAX
 0000023B  3B D0				CMP		EDX, EAX
 0000023D  75 07				JNE		updateCountList
 0000023F  83 C3 01				ADD		EBX, 1
 00000242					continueLoop:
						
 00000242  E2 F2				LOOP	countLoop
					
					; Jump to add last index to new array
 00000244  EB 12			JMP			skip

					; Add index occurence count to new array (all but last index)
 00000246				updateCountList:
 00000246  83 C3 01			ADD			EBX, 1
 00000249  83 C6 04			ADD			ESI, 4
 0000024C  89 1E			MOV			[ESI], EBX
 0000024E  BB 00000000			MOV			EBX, 0
 00000253  83 C2 01			add			EDX, 1
 00000256  EB EA			JMP			continueLoop

					; Add last index occurence count to new array
 00000258				skip:
 00000258  83 C3 01			ADD			EBX, 1
 0000025B  83 C6 04			ADD			ESI, 4
 0000025E  89 1E			MOV			[ESI], EBX
 00000260  BB 00000000			MOV			EBX, 0
 00000265  83 C2 01			add			EDX, 1

					; restore registers
 00000268  5F				POP			EDI
 00000269  5A				POP			EDX
 0000026A  59				POP			ECX
 0000026B  5B				POP			EBX
 0000026C  58				POP			EAX

					; restore EBP register
 0000026D  5D				POP			EBP

 0000026E  C2 0014			RET 20
 00000271			countList ENDP

				; ---------------------------------------------------------------------------------
				; Name: bye
				; 
				; The procedure displays a farewell message. 
				;
				; Preconditions: byeMessage exists as a string.
				;
				; Postconditions: EDX changed.
				;
				; Receives:	byeMessage passed by reference via the stack (in that order). 
				;
				; Returns: None.
				; ---------------------------------------------------------------------------------
 00000271			bye PROC
					
					; preserve EBP register and set it up as stack pointer
 00000271  55				PUSH		EBP
 00000272  8B EC			MOV			EBP, ESP
					
					; title, name and description of program
 00000274  8B 55 08			MOV			EDX, [EBP + 8]
 00000277  E8 00000000 E		CALL		WriteString
 0000027C  E8 00000000 E		CALL		Crlf


					; restore EBP register
 00000281  5D				POP			EBP

 00000282  C2 0004			RET 4
 00000285			bye ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/05/21 10:06:18
<Project 5 - Genorating, Sorting, Counting Random Ints     (  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000005AE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000285 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bye  . . . . . . . . . . . . . .	P Near	 00000271 _TEXT	Length= 00000014 Public STDCALL
countList  . . . . . . . . . . .	P Near	 00000215 _TEXT	Length= 0000005C Public STDCALL
  countLoop  . . . . . . . . . .	L Near	 00000236 _TEXT	
  continueLoop . . . . . . . . .	L Near	 00000242 _TEXT	
  updateCountList  . . . . . . .	L Near	 00000246 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000258 _TEXT	
displayList  . . . . . . . . . .	P Near	 0000016F _TEXT	Length= 00000057 Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 0000018E _TEXT	
  skipLineReset  . . . . . . . .	L Near	 0000019F _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 0000004F Public STDCALL
  skip_rounding_up . . . . . . .	L Near	 000001F7 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000150 _TEXT	Length= 0000001F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000DC _TEXT	Length= 00000030 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000ED _TEXT	
introduction . . . . . . . . . .	P Near	 000000B6 _TEXT	Length= 00000026 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B6 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000010C _TEXT	Length= 00000044 Public STDCALL
  backToSortLoop . . . . . . . .	L Near	 00000113 _TEXT	
  sortLoop . . . . . . . . . . .	L Near	 00000121 _TEXT	
  noExchangeNeeded . . . . . . .	L Near	 0000013E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNTSIZE  . . . . . . . . . . .	Text   	 20
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeMessage . . . . . . . . . . .	Byte	 00000587 _DATA	
countArray . . . . . . . . . . .	DWord	 000004AA _DATA	
counted  . . . . . . . . . . . .	Byte	 00000555 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 00000043 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 00000536 _DATA	
nameAndTitle . . . . . . . . . .	Byte	 00000000 _DATA	
randArray  . . . . . . . . . . .	DWord	 0000018A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted . . . . . . . . . . . . .	Byte	 0000051A _DATA	
space  . . . . . . . . . . . . .	Byte	 000004FA _DATA	
unsorted . . . . . . . . . . . .	Byte	 000004FC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
