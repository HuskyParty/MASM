Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/17/21 18:33:23
<Project 3 - Data Validation, Looping, and Constants     (Pr  Page 1 - 1


				TITLE Project 3 - Data Validation, Looping, and Constants     (Proj3_baxs.asm)

				; Author: Scott Bax
				; Last Modified: 17 JuLy 2021
				; OSU email address: baxs@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 1    Due Date: 18 July 2021
				; Description: Program that asks user for negative integers within a specific range, and to enter a non-negative
				;		number when they want to stop entering negative numbers. Once that occurs, Program will display how many 
				;		valid numbers were entered, the max/min/sum/round average of the valid numbers. If user inputs incorrect
				;		program will display error until correct number is input. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; (insert constant definitions here)

 00000000			.data

				; Intro variables
 00000000 53 63 6F 74 74	program_title		BYTE	"Scott Bax - Project Project 3 -  Data Validation, Looping, and Constants", 0
	   20 42 61 78 20
	   2D 20 50 72 6F
	   6A 65 63 74 20
	   50 72 6F 6A 65
	   63 74 20 33 20
	   2D 20 20 44 61
	   74 61 20 56 61
	   6C 69 64 61 74
	   69 6F 6E 2C 20
	   4C 6F 6F 70 69
	   6E 67 2C 20 61
	   6E 64 20 43 6F
	   6E 73 74 61 6E
	   74 73 00
 00000049 2A 2A 45 43 3A	extra_credit		BYTE	"**EC: Increments line number for valid user inputs", 0
	   20 49 6E 63 72
	   65 6D 65 6E 74
	   73 20 6C 69 6E
	   65 20 6E 75 6D
	   62 65 72 20 66
	   6F 72 20 76 61
	   6C 69 64 20 75
	   73 65 72 20 69
	   6E 70 75 74 73
	   00
 0000007C 57 68 61 74 20	user_name_prompt	BYTE	"What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 00000090  00000021 [		user_name			BYTE	33 DUP(0) ; User name to be entered
	    00
	   ]
 000000B1 48 65 79 20 77	user_greeting		BYTE	"Hey what's up, ", 0
	   68 61 74 27 73
	   20 75 70 2C 20
	   00

				; Data calculation prompt variables
 000000C1 50 6C 65 61 73	number_req_prompt	BYTE	"Please enter numbers between [-200, -100] or between [-50, -1].", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 62 65 74 77
	   65 65 6E 20 5B
	   2D 32 30 30 2C
	   20 2D 31 30 30
	   5D 20 6F 72 20
	   62 65 74 77 65
	   65 6E 20 5B 2D
	   35 30 2C 20 2D
	   31 5D 2E 00
 00000101 54 6F 20 73 65	how_finish_prompt	BYTE	"To see the results when you are finished, enter a non-negative number.", 0
	   65 20 74 68 65
	   20 72 65 73 75
	   6C 74 73 20 77
	   68 65 6E 20 79
	   6F 75 20 61 72
	   65 20 66 69 6E
	   69 73 68 65 64
	   2C 20 65 6E 74
	   65 72 20 61 20
	   6E 6F 6E 2D 6E
	   65 67 61 74 69
	   76 65 20 6E 75
	   6D 62 65 72 2E
	   00
 00000148 45 6E 74 65 72	enter_num_prompt 	BYTE	"Enter a number: ", 0
	   20 61 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000159 2E 20 00		enter_dot_prompt 	BYTE	". ", 0
 0000015C 57 72 6F 6E 67	invalid_num_prompt 	BYTE	"Wrong Number!", 0
	   20 4E 75 6D 62
	   65 72 21 00

				; Data calculation variables
 0000016A 00000000		number_input		SDWORD	?		  ; user number input
 0000016E 00000000		min_value			SDWORD	?		  	  
 00000172 00000000		max_value			SDWORD	?		  
 00000176 00000000		sum_value			SDWORD	?
 0000017A 00000000		average_value		SDWORD	?
 0000017E 00000000		average_remainder	SDWORD	?
 00000182 00000000		average_difference	SDWORD	?
 00000186 00000000		valid_numbers		DWORD	0


				;Display result prompts
 0000018A 59 6F 75 20 65	valid_number_res1_p	BYTE	"You entered ", 0
	   6E 74 65 72 65
	   64 20 00
 00000197 20 76 61 6C 69	valid_number_res2_p	BYTE	" valid numbers!", 0
	   64 20 6E 75 6D
	   62 65 72 73 21
	   00
 000001A7 54 68 65 20 6D	min_value_res_p		BYTE	"The minimum valid number is ", 0
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 000001C4 54 68 65 20 6D	max_value_res_p		BYTE	"The maximum valid number is ", 0
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 000001E1 54 68 65 20 76	sum_value_res_p		BYTE	"The valid numbers sum is ", 0
	   61 6C 69 64 20
	   6E 75 6D 62 65
	   72 73 20 73 75
	   6D 20 69 73 20
	   00
 000001FB 54 68 65 20 72	average_value_res_p	BYTE	"The rounded average is ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00


				; Farewell prompt
 00000213 4E 6F 20 76 61	no_valid_numbers_p	BYTE	"No valid numbers were entered.", 0
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   73 20 77 65 72
	   65 20 65 6E 74
	   65 72 65 64 2E
	   00
 00000232 54 68 61 6E 6B	finished_prompt1	BYTE	"Thanks for using this program. See ya, ", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 2E
	   20 53 65 65 20
	   79 61 2C 20 00
 0000025A 21 00			finished_prompt2	BYTE	"!", 0
 00000000			.code
 00000000			main PROC

				; -------------------------
				; INTRODUCTION - Display program title and programmer's name. Get user name and greet them.
				; -------------------------
					;title, name, extra credit
 00000000  BA 00000000 R		mov		EDX, OFFSET program_title
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	Crlf

 0000000F  BA 00000049 R		mov		EDX, OFFSET extra_credit
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	Crlf
 0000001E  E8 00000000 E		call	Crlf

					;get user name
 00000023  BA 0000007C R		mov		EDX, OFFSET user_name_prompt
 00000028  E8 00000000 E		call WriteString
 0000002D  BA 00000090 R		mov		EDX, OFFSET user_name
 00000032  B9 00000021			mov		ECX, 33
 00000037  E8 00000000 E		call ReadString

					;greet user
 0000003C  BA 000000B1 R		mov		EDX, OFFSET user_greeting
 00000041  E8 00000000 E		call WriteString
 00000046  BA 00000090 R		mov		EDX, OFFSET user_name
 0000004B  E8 00000000 E		call WriteString
 00000050  E8 00000000 E		call	Crlf
 00000055  E8 00000000 E		call	Crlf
 0000005A  E8 00000000 E		call	Crlf

				; -------------------------
				; INSTRUCTIONS/GET DATA - Displays instructions to user. Get data from user
				; -------------------------

					;ask for numbers with parameters
 0000005F  BA 000000C1 R		mov		EDX, OFFSET number_req_prompt
 00000064  E8 00000000 E		call	WriteString
 00000069  E8 00000000 E		call	Crlf

					;tell how to finish
 0000006E  BA 00000101 R		mov		EDX, OFFSET how_finish_prompt
 00000073  E8 00000000 E		call	WriteString
 00000078  E8 00000000 E		call	Crlf

					;ask for a number between [-200, -100] or between [-50, -1] while looping
 0000007D				ask_number:
						
						;prompt
 0000007D  A1 00000186 R			mov		EAX, valid_numbers
 00000082  E8 00000000 E			call	WriteDec				; adding line number for valid user inputs

 00000087  BA 00000159 R			mov		EDX, OFFSET	enter_dot_prompt
 0000008C  E8 00000000 E			call	WriteString				; adds period

 00000091  BA 00000148 R			mov		EDX, OFFSET enter_num_prompt
 00000096  E8 00000000 E			call	WriteString

						;get number
 0000009B  E8 00000000 E			call	ReadInt				; number now in variable
 000000A0  A3 0000016A R			mov		number_input, EAX


						;if number is not within range and not non-negative 

 000000A5  83 3D 0000016A R			cmp		number_input, -51
	   CD
 000000AC  7F 17				jg		above_neg_fifty		;above -50

 000000AE  81 3D 0000016A R			cmp		number_input, -200
	   FFFFFF38
 000000B8  7C 1A				jl		wrong_number		;below -200

 000000BA  83 3D 0000016A R			cmp		number_input, -99
	   9D
 000000C1  7D 11				jnl		wrong_number		;above -100

						;loop again
 000000C3  EB 20				jmp		right_number


					;To execute if number is above neg fifty
 000000C5				above_neg_fifty:

 000000C5  83 3D 0000016A R			cmp		number_input, -1
	   FF
 000000CC  0F 8F 00000090			jg		data_calc		;positive number entered
 000000D2  EB 11				jmp		right_number

					;To execute if wrong number is entered
 000000D4				wrong_number:

						;Error mesage
 000000D4  BA 0000015C R			mov		EDX, OFFSET invalid_num_prompt
 000000D9  E8 00000000 E			call	WriteString
 000000DE  E8 00000000 E			call	Crlf

						;go back to ask number loop
 000000E3  EB 98				jmp		ask_number

					;To execute if right number is entered. will track number of valid numbers/min and max value
 000000E5				right_number:


						;count valid numbers
 000000E5  B8 00000001				mov		EAX, 1
 000000EA  8B 1D 00000186 R			mov		EBX, valid_numbers
 000000F0  03 C3				add		EAX, EBX
 000000F2  A3 00000186 R			mov		valid_numbers, EAX

						;update sum of valid numbers
 000000F7  8B 1D 0000016A R			mov		EBX, number_input
 000000FD  01 1D 00000176 R			add		sum_value, EBX


						;initialize both min/max variables to first input
 00000103  83 3D 00000186 R			cmp		valid_numbers, 1
	   01
 0000010A  74 1F				je		initialize_min_max


						;track min value
 0000010C  A1 0000016A R			mov		EAX, number_input
 00000111  39 05 0000016E R			cmp		min_value, EAX
 00000117  7F 2B				jg		update_min

						;track max value
 00000119  A1 0000016A R			mov		EAX, number_input
 0000011E  39 05 00000172 R			cmp		max_value, EAX
 00000124  7C 2D				jl		update_max

						;go back to ask number loop
 00000126  E9 FFFFFF52				jmp		ask_number

					;initialize both min/max variables to first input
 0000012B				initialize_min_max:
						;update value
 0000012B  A1 0000016A R			mov		EAX, number_input
 00000130  A3 0000016E R			mov		min_value, EAX

						;update value
 00000135  A1 0000016A R			mov		EAX, number_input
 0000013A  A3 00000172 R			mov		max_value, EAX

						;go back to ask number loop
 0000013F  E9 FFFFFF39				jmp		ask_number

					;Updates min value
 00000144				update_min:
						
						;update value
 00000144  A1 0000016A R			mov		EAX, number_input
 00000149  A3 0000016E R			mov		min_value, EAX

						;go back to ask number loop
 0000014E  E9 FFFFFF2A				jmp		ask_number

					;Updates max value
 00000153				update_max:

						;update value
 00000153  A1 0000016A R			mov		EAX, number_input
 00000158  A3 00000172 R			mov		max_value, EAX


						;go back to ask number loop
 0000015D  E9 FFFFFF1B				jmp		ask_number

				; -------------------------
				; CALCULATE DATA - Calculate Data for final results
				; -------------------------
					;To execute if number is above neg fifty
 00000162				data_calc:

						; if get here without any valid numbers
 00000162  B8 00000001				mov		EAX, 1
 00000167  39 05 00000186 R			cmp		valid_numbers, EAX
 0000016D  0F 82 000000D2			jb		no_valid_numbers 

						;calculate average by dividing sum by valid numbers
 00000173  A1 00000176 R			mov		EAX, sum_value
 00000178  99					CDQ
 00000179  F7 3D 00000186 R			idiv	valid_numbers
 0000017F  A3 0000017A R			mov		average_value, EAX


 00000184  6B DA FF				imul	EBX, EDX, -1			;make the remainder non-negative
 00000187  89 1D 0000017E R			mov		average_remainder, EBX
 0000018D  BB 00000000				mov		EBX, 0					;reset EBX value


						;find difference between remainder and divsor
 00000192  8B 1D 0000017E R			mov		EBX, average_remainder
 00000198  A1 00000186 R			mov		EAX, valid_numbers
 0000019D  2B C3				sub		EAX, EBX

 0000019F  A3 00000182 R			mov		average_difference, EAX

						;calculate average by dividing sum by valid numbers
 000001A4  A1 00000182 R			mov		EAX, average_difference
 000001A9  39 05 0000017E R			cmp		average_remainder, EAX
 000001AF  7C 0B				jl		skip_rounding_up
 000001B1  B8 FFFFFFFF				mov		EAX, -1
 000001B6  01 05 0000017A R			add		average_value, EAX

					;rounding up got skipped
 000001BC				skip_rounding_up:
						
				; -------------------------
				; DISPLAY DATA - Calculate Data for final results
				; -------------------------

					;display number of valid numbers entered 
 000001BC  BA 0000018A R		mov		EDX, OFFSET valid_number_res1_p
 000001C1  E8 00000000 E		call	WriteString			; display prompt part 1

 000001C6  A1 00000186 R		mov		EAX, valid_numbers
 000001CB  E8 00000000 E		call	WriteDec			; dislpay number

 000001D0  BA 00000197 R		mov		EDX, OFFSET valid_number_res2_p
 000001D5  E8 00000000 E		call	WriteString			; display prompt part 1
 000001DA  E8 00000000 E		call	Crlf

					;display max value
 000001DF  BA 000001C4 R		mov		EDX, OFFSET max_value_res_p
 000001E4  E8 00000000 E		call	WriteString			; display prompt

 000001E9  A1 00000172 R		mov		EAX, max_value
 000001EE  E8 00000000 E		call	WriteInt			; dislpay number
 000001F3  E8 00000000 E		call	Crlf

					;display min value
 000001F8  BA 000001A7 R		mov		EDX, OFFSET min_value_res_p
 000001FD  E8 00000000 E		call	WriteString			; display prompt

 00000202  A1 0000016E R		mov		EAX, min_value
 00000207  E8 00000000 E		call	WriteInt			; dislpay number
 0000020C  E8 00000000 E		call	Crlf

					;display sum value
 00000211  BA 000001E1 R		mov		EDX, OFFSET sum_value_res_p
 00000216  E8 00000000 E		call	WriteString			; display prompt

 0000021B  A1 00000176 R		mov		EAX, sum_value
 00000220  E8 00000000 E		call	WriteInt			; dislpay number
 00000225  E8 00000000 E		call	Crlf

					;display average value
 0000022A  BA 000001FB R		mov		EDX, OFFSET average_value_res_p
 0000022F  E8 00000000 E		call	WriteString			; display prompt
 00000234  A1 0000017A R		mov		EAX, average_value
 00000239  E8 00000000 E		call	WriteInt			; display prompt
 0000023E  E8 00000000 E		call	Crlf
					
					;jump to farewell
 00000243  EB 14			jmp		goodbye
				; -------------------------
				;  PARTING MESSAGE - Display farewell to user
				; -------------------------
					
					;special message if no valild numbers were entered
 00000245				no_valid_numbers:
					
 00000245  BA 00000213 R			mov		EDX, OFFSET no_valid_numbers_p		; no valid num prompt
 0000024A  E8 00000000 E			call	Crlf
 0000024F  E8 00000000 E			call	WriteString
 00000254  E8 00000000 E			call	Crlf

					;goodbye message
 00000259				goodbye:

						;prompt par 1
 00000259  E8 00000000 E			call	Crlf
 0000025E  BA 00000232 R			mov		EDX, OFFSET finished_prompt1
 00000263  E8 00000000 E			call	WriteString

						;user's name
 00000268  BA 00000090 R			mov		EDX, OFFSET user_name
 0000026D  E8 00000000 E			call	WriteString

						;prompt part 2
 00000272  BA 0000025A R			mov		EDX, OFFSET finished_prompt2
 00000277  E8 00000000 E			call	WriteString
 0000027C  E8 00000000 E			call	Crlf

					Invoke ExitProcess,0	; exit to operating system
 00000281  6A 00	   *	    push   +000000000h
 00000283  E8 00000000 E   *	    call   ExitProcess
 00000288			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/17/21 18:33:23
<Project 3 - Data Validation, Looping, and Constants     (Pr  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000025C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000288 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000288 Public STDCALL
  ask_number . . . . . . . . . .	L Near	 0000007D _TEXT	
  above_neg_fifty  . . . . . . .	L Near	 000000C5 _TEXT	
  wrong_number . . . . . . . . .	L Near	 000000D4 _TEXT	
  right_number . . . . . . . . .	L Near	 000000E5 _TEXT	
  initialize_min_max . . . . . .	L Near	 0000012B _TEXT	
  update_min . . . . . . . . . .	L Near	 00000144 _TEXT	
  update_max . . . . . . . . . .	L Near	 00000153 _TEXT	
  data_calc  . . . . . . . . . .	L Near	 00000162 _TEXT	
  skip_rounding_up . . . . . . .	L Near	 000001BC _TEXT	
  no_valid_numbers . . . . . . .	L Near	 00000245 _TEXT	
  goodbye  . . . . . . . . . . .	L Near	 00000259 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average_difference . . . . . . .	DWord	 00000182 _DATA	
average_remainder  . . . . . . .	DWord	 0000017E _DATA	
average_value_res_p  . . . . . .	Byte	 000001FB _DATA	
average_value  . . . . . . . . .	DWord	 0000017A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enter_dot_prompt . . . . . . . .	Byte	 00000159 _DATA	
enter_num_prompt . . . . . . . .	Byte	 00000148 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extra_credit . . . . . . . . . .	Byte	 00000049 _DATA	
finished_prompt1 . . . . . . . .	Byte	 00000232 _DATA	
finished_prompt2 . . . . . . . .	Byte	 0000025A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
how_finish_prompt  . . . . . . .	Byte	 00000101 _DATA	
invalid_num_prompt . . . . . . .	Byte	 0000015C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_value_res_p  . . . . . . . .	Byte	 000001C4 _DATA	
max_value  . . . . . . . . . . .	DWord	 00000172 _DATA	
min_value_res_p  . . . . . . . .	Byte	 000001A7 _DATA	
min_value  . . . . . . . . . . .	DWord	 0000016E _DATA	
no_valid_numbers_p . . . . . . .	Byte	 00000213 _DATA	
number_input . . . . . . . . . .	DWord	 0000016A _DATA	
number_req_prompt  . . . . . . .	Byte	 000000C1 _DATA	
program_title  . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_value_res_p  . . . . . . . .	Byte	 000001E1 _DATA	
sum_value  . . . . . . . . . . .	DWord	 00000176 _DATA	
user_greeting  . . . . . . . . .	Byte	 000000B1 _DATA	
user_name_prompt . . . . . . . .	Byte	 0000007C _DATA	
user_name  . . . . . . . . . . .	Byte	 00000090 _DATA	
valid_number_res1_p  . . . . . .	Byte	 0000018A _DATA	
valid_number_res2_p  . . . . . .	Byte	 00000197 _DATA	
valid_numbers  . . . . . . . . .	DWord	 00000186 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
