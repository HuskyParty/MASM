Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/04/21 20:53:14
<Project 5 - Genorating, Sorting, Counting Random Ints     (  Page 1 - 1


				TITLE Project 5 - Genorating, Sorting, Counting Random Ints     (Proj5_baxs.asm)

				; Author: Scott Bax
				; Last Modified: 4 Aug 2021
				; OSU email address: baxs@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 5    Due Date: 8 Aug 2021
				; Description: Program that generates an array with 200 random integers between 10-29
				;		The program displays the list first unsorted. It then /calculates/displays the median value
				;		of the array. It then sorts/displays array in ascending order. It then generates/
				;		displays another array holding the number of times each random number was displayed.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Integer Constants
 = 000000C8			ARRAYSIZE = 200
 = 0000000A			LO = 10
 = 0000001D			HI = 29

 00000000			.data

				; Intro variables
 00000000 53 63 6F 74 74	nameAndTitle	BYTE	"Scott Bax - Project 5 - Random Integer Array Generator/Manipulator", 0
	   20 42 61 78 20
	   2D 20 50 72 6F
	   6A 65 63 74 20
	   35 20 2D 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 20 41
	   72 72 61 79 20
	   47 65 6E 65 72
	   61 74 6F 72 2F
	   4D 61 6E 69 70
	   75 6C 61 74 6F
	   72 00
 00000043 54 68 69 73 20	description		BYTE	"This program generates an array with 200 random integers between 10-29", 10, 13
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 61 6E
	   20 61 72 72 61
	   79 20 77 69 74
	   68 20 32 30 30
	   20 72 61 6E 64
	   6F 6D 20 69 6E
	   74 65 67 65 72
	   73 20 62 65 74
	   77 65 65 6E 20
	   31 30 2D 32 39
	   0A 0D
 0000008B  61 6E 64 20 64					BYTE	"and displays the list first unsorted. It then /calculates/displays the median value", 10, 13
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6C 69 73
	   74 20 66 69 72
	   73 74 20 75 6E
	   73 6F 72 74 65
	   64 2E 20 49 74
	   20 74 68 65 6E
	   20 2F 63 61 6C
	   63 75 6C 61 74
	   65 73 2F 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 0A 0D
 000000E0  6F 66 20 74 68					BYTE	"of the array. It then sorts/displays array in ascending order. It then generates/", 10, 13
	   65 20 61 72 72
	   61 79 2E 20 49
	   74 20 74 68 65
	   6E 20 73 6F 72
	   74 73 2F 64 69
	   73 70 6C 61 79
	   73 20 61 72 72
	   61 79 20 69 6E
	   20 61 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 20 49 74
	   20 74 68 65 6E
	   20 67 65 6E 65
	   72 61 74 65 73
	   2F 0A 0D
 00000133  64 69 73 70 6C					BYTE	"displays another array holding the number of times each random number was displayed.", 10, 13, 0
	   61 79 73 20 61
	   6E 6F 74 68 65
	   72 20 61 72 72
	   61 79 20 68 6F
	   6C 64 69 6E 67
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   74 69 6D 65 73
	   20 65 61 63 68
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 64
	   69 73 70 6C 61
	   79 65 64 2E 0A
	   0D 00


				; Array variables	
 0000018A  000000C8 [		randArray		DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]

				; Display variables	
 000004AA 20 00			space			BYTE	" ", 0
 000004AC 55 6E 73 6F 72	unsorted		BYTE	"Unsorted random numbers are: ", 0
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 3A 20 00
 000004CA 53 6F 72 74 65	sorted			BYTE	"Sorted random numbers are: ", 0
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   3A 20 00
 000004E6 4D 65 64 69 61	median			BYTE	"Median value of the array is: ", 0
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   61 72 72 61 79
	   20 69 73 3A 20
	   00



 00000000			.code
 00000000			main PROC

					; Intro
 00000000  68 00000000 R		PUSH		OFFSET nameAndTitle 
 00000005  68 00000043 R		PUSH		OFFSET description
 0000000A  E8 0000006F			CALL		introduction

					; Fill array
 0000000F  68 0000018A R		PUSH		OFFSET randArray
 00000014  6A 0A			PUSH		LO
 00000016  6A 1D			PUSH		HI
 00000018  68 000000C8			PUSH		ARRAYSIZE
 0000001D  E8 00000082			CALL		fillArray

					; Display unsorted array
 00000022  68 000004AC R		PUSH		OFFSET unsorted
 00000027  68 000004AA R		PUSH		OFFSET space
 0000002C  68 0000018A R		PUSH		OFFSET randArray
 00000031  68 000000C8			PUSH		ARRAYSIZE
 00000036  E8 000000FC			CALL		displayList

					; Sort array
 0000003B  68 0000018A R		PUSH		OFFSET randArray
 00000040  68 000000C8			PUSH		ARRAYSIZE
 00000045  E8 0000008A			CALL		sortList

					; Display median
 0000004A  68 000004E6 R		PUSH		OFFSET median
 0000004F  68 0000018A R		PUSH		OFFSET randArray
 00000054  68 000000C8			PUSH		ARRAYSIZE
 00000059  E8 00000130			CALL		displayMedian

					; Display array
 0000005E  68 000004CA R		PUSH		OFFSET sorted
 00000063  68 000004AA R		PUSH		OFFSET space
 00000068  68 0000018A R		PUSH		OFFSET randArray
 0000006D  68 000000C8			PUSH		ARRAYSIZE
 00000072  E8 000000C0			CALL		displayList



					Invoke ExitProcess,0	; exit to operating system
 00000077  6A 00	   *	    push   +000000000h
 00000079  E8 00000000 E   *	    call   ExitProcess

 0000007E			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				; 
				; The procedure displays programmer name and program description to user. 
				;
				; Preconditions: intro1 and intro2 exist as strings.
				;
				; Postconditions: EDX changed.
				;
				; Receives:	intro1 and intro2 by reference via the stack (in that order). 
				;
				; Returns: None.
				; ---------------------------------------------------------------------------------
 0000007E			introduction PROC
					
					; preserve EBP register and set it up as stack pointer
 0000007E  55				PUSH		EBP
 0000007F  8B EC			MOV			EBP, ESP
					
					; title, name and description of program
 00000081  8B 55 0C			MOV			EDX, [EBP + 12]
 00000084  E8 00000000 E		CALL		WriteString
 00000089  E8 00000000 E		CALL		Crlf
 0000008E  E8 00000000 E		CALL		Crlf

 00000093  8B 55 08			MOV			EDX, [EBP + 8]
 00000096  E8 00000000 E		CALL		WriteString
 0000009B  E8 00000000 E		CALL		Crlf

					; restore EBP register
 000000A0  5D				POP			EBP

 000000A1  C2 0008			RET 8
 000000A4			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values
				;
				; Receives:	someArray passed by referenece as input/output. LO, HI, ARRAYSIZE passed by value
				;
				; Returns: someArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 000000A4			fillArray PROC
					
					; preserve EBP register and set it up as stack pointer
 000000A4  55				PUSH		EBP
 000000A5  8B EC			MOV			EBP, ESP

					; preserver registers
 000000A7  50				PUSH		EAX
 000000A8  51				PUSH		ECX
 000000A9  57				PUSH		EDI

					; set loop & EDI for loop reference
 000000AA  8B 4D 08			MOV			ECX, [EBP + 8]
 000000AD  8B 7D 14			MOV			EDI, [EBP + 20]

					; set seed value for randomizing number
 000000B0  E8 00000000 E		CALL	Randomize

					; loop to fill array
 000000B5				fillLoop:
						
						; Generate random number by using HI & LO
						; Since RandomRange Initializes at zero mus subtract LO from HI
						; then generate number and add LO back to HI
 000000B5  8B 45 0C				MOV		EAX, [EBP + 12]
 000000B8  2B 45 10				SUB		EAX, [EBP + 16]
 000000BB  83 C0 01				ADD		EAX, 1				; RandomRange upper limit exclusive

 000000BE  E8 00000000 E			CALL	RandomRange
 000000C3  03 45 10				ADD		EAX, [EBP + 16]		; add back Lo


 000000C6  89 07				MOV		[EDI], EAX
 000000C8  83 C7 04				ADD		EDI, 4				; put random val in array and increment to next index

 000000CB  E2 E8				LOOP	fillLoop


					; restore registers
 000000CD  5F				POP			EDI
 000000CE  59				POP			ECX
 000000CF  58				POP			EAX

					; restore EBP register
 000000D0  5D				POP			EBP

 000000D1  C2 0010			RET 16
 000000D4			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: sortList
				; 
				; The procedure sorts an array of ARRAYSIZE in ascending order.

				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:	
				;
				; Returns: 
				; ---------------------------------------------------------------------------------
 000000D4			sortList PROC
					
					; preserve EBP register and set it up as stack pointer
 000000D4  55				PUSH		EBP
 000000D5  8B EC			MOV			EBP, ESP

					; preserve registers
 000000D7  50				PUSH		EAX
 000000D8  53				PUSH		EBX
 000000D9  51				PUSH		ECX
 000000DA  57				PUSH		EDI

 000000DB				backToSortLoop:
					; set loop & EDI for loop reference
 000000DB  8B 4D 08			MOV			ECX, [EBP + 8]
 000000DE  83 E9 01			SUB			ECX, 1					; due to exchangeg call procedure, 
 000000E1  8B 7D 0C			MOV			EDI, [EBP + 12]
 000000E4  BB 00000000			MOV			EBX, 0					; tracks how many exchanges occur

					; loop to sort arrat by exchanges 
 000000E9				sortLoop:   

						; Set up array elements for compare and possible pass to exchange procedure
 000000E9  53					PUSH	EBX
 000000EA  8B 07				MOV		EAX, [EDI]
						
 000000EC  83 C7 04				ADD		EDI, 4
 000000EF  8B 1F				MOV		EBX, [EDI]
 000000F1  83 EF 04				SUB		EDI, 4			; restore EDI back
						

 000000F4  3B C3				CMP		EAX, EBX
 000000F6  5B					POP		EBX
 000000F7  76 0D				JNA		noExchangeNeeded

						; restore and increment EBX since exchange will occur
						
 000000F9  83 C3 01				ADD		EBX, 1

						; exhange elements in array if left > right
 000000FC  57					PUSH		EDI
 000000FD  83 C7 04				ADD			EDI, 4
 00000100  57					PUSH		EDI
 00000101  E8 00000012				CALL		exchangeElements  

 00000106					noExchangeNeeded:

 00000106  83 C7 04				ADD		EDI, 4				;increment to next index
 00000109  E2 DE				LOOP	sortLoop
					
 0000010B  83 FB 00			CMP			EBX, 0
 0000010E  75 CB			JNE			backToSortLoop


					; restore registers
 00000110  5F				POP			EDI
 00000111  59				POP			ECX
 00000112  5B				POP			EBX
 00000113  58				POP			EAX

					; restore EBP register
 00000114  5D				POP			EBP

 00000115  C2 0008			RET 8
 00000118			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements  
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values, EDX changed
				;
				; Receives:	someArray passed by referenece as input/output. LO, HI, ARRAYSIZE passed by value. space passed by reference.
				;
				; Returns: someArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 00000118			exchangeElements PROC
					
					; preserve EBP register and set it up as stack pointer
 00000118  55				PUSH		EBP
 00000119  8B EC			MOV			EBP, ESP

					; preserver registers

 0000011B  53				PUSH		EBX
 0000011C  51				PUSH		ECX


					; set registers with first and second index
 0000011D  8B 7D 08			MOV			EDI, [EBP + 8]		; second index
 00000120  8B 0F			MOV			ECX, [EDI]

 00000122  8B 7D 0C			MOV			EDI, [EBP + 12]		; first index
 00000125  8B 1F			MOV			EBX, [EDI]

 00000127  8B 7D 08			MOV			EDI, [EBP + 8]	
 0000012A  89 1F			MOV			[EDI], EBX

 0000012C  8B 7D 0C			MOV			EDI, [EBP + 12]	
 0000012F  89 0F			MOV			[EDI], ECX


					; restore registers
 00000131  59				POP			ECX
 00000132  5B				POP			EBX


					; restore EBP register
 00000133  5D				POP			EBP

 00000134  C2 0008			RET 8
 00000137			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values, EDX changed
				;
				; Receives:	someArray passed by referenece as input/output. LO, HI, ARRAYSIZE passed by value. space passed by reference.
				;
				; Returns: someArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 00000137			displayList PROC
					
					; preserve EBP register and set it up as stack pointer
 00000137  55				PUSH		EBP
 00000138  8B EC			MOV			EBP, ESP

					; preserver registers
 0000013A  50				PUSH		EAX
 0000013B  53				PUSH		EBX
 0000013C  51				PUSH		ECX
 0000013D  57				PUSH		EDI

					; set loop & EDI for loop reference/set EDX for writeString
 0000013E  8B 4D 08			MOV			ECX, [EBP + 8]
 00000141  8B 7D 0C			MOV			EDI, [EBP + 12]
 00000144  8B 55 14			MOV			EDX, [EBP + 20]

					; display title message
 00000147  E8 00000000 E		CALL		WriteString
 0000014C  E8 00000000 E		CALL		Crlf

					; used to track numbers per line
 00000151  BB 00000000			MOV			EBX, 0 
					
					
					; loop to display array
 00000156				displayLoop:
						
						; pass array item into WriteDec
 00000156  8B 07				MOV		EAX, [EDI]
 00000158  83 FB 14				CMP		EBX, 20

 0000015B  75 0A				JNE		skipLineReset		; if there are 20 numbers make new line
 0000015D  BB 00000000				MOV		EBX, 0 
 00000162  E8 00000000 E			CALL	Crlf	

 00000167					skipLineReset:
 00000167  E8 00000000 E			CALL	WriteDec			; display number

 0000016C  8B 55 10				MOV		EDX, [EBP + 16]
 0000016F  E8 00000000 E			CALL	WriteString			; display space


 00000174  83 C7 04				ADD		EDI, 4				;increment to next index
 00000177  83 C3 01				ADD		EBX, 1
 0000017A  E2 DA				LOOP	displayLoop


					; New line
 0000017C  E8 00000000 E		CALL	Crlf
 00000181  E8 00000000 E		CALL	Crlf
					
					; restore registers
 00000186  5F				POP			EDI
 00000187  59				POP			ECX
 00000188  5B				POP			EBX
 00000189  58				POP			EAX

					; restore EBP register
 0000018A  5D				POP			EBP

 0000018B  C2 0010			RET 16
 0000018E			displayList ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian 
				; 
				; The procedure fills an array of ARRAYSIZE between the range of LO and HI.
				;
				; Preconditions: someArray, LO, HI, ARRAYSIZE exist
				;
				; Postconditions: someArray is updated with new random values, EDX changed
				;
				; Receives:	someArray passed by referenece as input/output. LO, HI, ARRAYSIZE passed by value. space passed by reference.
				;
				; Returns: someArray updated with random integers within specified range
				; ---------------------------------------------------------------------------------
 0000018E			displayMedian PROC
					
					; preserve EBP register and set it up as stack pointer
 0000018E  55				PUSH		EBP
 0000018F  8B EC			MOV			EBP, ESP

					; preserver registers
 00000191  50				PUSH		EAX
 00000192  53				PUSH		EBX
 00000193  51				PUSH		ECX
 00000194  57				PUSH		EDI

					; set loop & EDI for loop reference/set EDX for writeString
 00000195  8B 4D 08			MOV			ECX, [EBP + 8]
 00000198  8B 7D 0C			MOV			EDI, [EBP + 12]
 0000019B  8B 55 10			MOV			EDX, [EBP + 16]

					; display title message
 0000019E  E8 00000000 E		CALL		WriteString

					;calculate average by dividing sum by valid numbers
 000001A3  8B C1			MOV			EAX, ECX
 000001A5  BB 00000002			MOV			EBX, 2
 000001AA  99				CDQ
 000001AB  F7 F3			DIV			EBX

					;find difference between remainder and divsor
 000001AD  BB 00000002			MOV		EBX, 2
 000001B2  2B DA			SUB		EBX, EDX

					;calculate average by dividing by divisor
 000001B4  3B D8			cmp		EBX, EAX
 000001B6  7C 07			jl		skip_rounding_up
 000001B8  BB FFFFFFFF			mov		EBX, -1
 000001BD  03 C3			add		EAX, EBX

					;rounding up got skipped
 000001BF				skip_rounding_up:

					;Median in EAX
 000001BF  6B C0 04			IMUL	EAX, 4
					

 000001C2  03 F8			ADD		EDI, EAX

 000001C4  8B 07			MOV     EAX, [EDI]

 000001C6  E8 00000000 E		CALL	WriteDec


					

					; New line
 000001CB  E8 00000000 E		CALL	Crlf
 000001D0  E8 00000000 E		CALL	Crlf
					
					; restore registers
 000001D5  5F				POP			EDI
 000001D6  59				POP			ECX
 000001D7  5B				POP			EBX
 000001D8  58				POP			EAX

					; restore EBP register
 000001D9  5D				POP			EBP

 000001DA  C2 000C			RET 12
 000001DD			displayMedian  ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    08/04/21 20:53:14
<Project 5 - Genorating, Sorting, Counting Random Ints     (  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000505 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 00000137 _TEXT	Length= 00000057 Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 00000156 _TEXT	
  skipLineReset  . . . . . . . .	L Near	 00000167 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000018E _TEXT	Length= 0000004F Public STDCALL
  skip_rounding_up . . . . . . .	L Near	 000001BF _TEXT	
exchangeElements . . . . . . . .	P Near	 00000118 _TEXT	Length= 0000001F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 00000030 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000B5 _TEXT	
introduction . . . . . . . . . .	P Near	 0000007E _TEXT	Length= 00000026 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000D4 _TEXT	Length= 00000044 Public STDCALL
  backToSortLoop . . . . . . . .	L Near	 000000DB _TEXT	
  sortLoop . . . . . . . . . . .	L Near	 000000E9 _TEXT	
  noExchangeNeeded . . . . . . .	L Near	 00000106 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 00000043 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 000004E6 _DATA	
nameAndTitle . . . . . . . . . .	Byte	 00000000 _DATA	
randArray  . . . . . . . . . . .	DWord	 0000018A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted . . . . . . . . . . . . .	Byte	 000004CA _DATA	
space  . . . . . . . . . . . . .	Byte	 000004AA _DATA	
unsorted . . . . . . . . . . . .	Byte	 000004AC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
