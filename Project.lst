Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/03/21 11:45:18
<Project 1 - Basic Logic and Arithmetic Program     (Proj1_B  Page 1 - 1


				TITLE Project 1 - Basic Logic and Arithmetic Program     (Proj1_Baxs.asm)

				; Author: Scott Bax
				; Last Modified: 3 JuLy 2021
				; OSU email address: baxs@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 1    Due Date: 11 July 2021
				; Description: Basic logic and arithmetic program that will ask user to input three numbers in descending order (will exit if not comply). 
				;	   The program will calculate return results of specific addition, subtraction and division of the numbers. The program 
				;	   continues until the user decides to exit.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; variables holding intro messages
 00000000 53 63 6F 74 74	intro_title		BYTE	"Scott Bax - Project Project 1 -  Basic Logic and Arithmetic Program", 0
	   20 42 61 78 20
	   2D 20 50 72 6F
	   6A 65 63 74 20
	   50 72 6F 6A 65
	   63 74 20 31 20
	   2D 20 20 42 61
	   73 69 63 20 4C
	   6F 67 69 63 20
	   61 6E 64 20 41
	   72 69 74 68 6D
	   65 74 69 63 20
	   50 72 6F 67 72
	   61 6D 00
 00000044 2A 2A 45 43 3A	intro_EC1		BYTE	"**EC: Program repeats until the user chooses to quit.", 0
	   20 50 72 6F 67
	   72 61 6D 20 72
	   65 70 65 61 74
	   73 20 75 6E 74
	   69 6C 20 74 68
	   65 20 75 73 65
	   72 20 63 68 6F
	   6F 73 65 73 20
	   74 6F 20 71 75
	   69 74 2E 00
 0000007A 2A 2A 45 43 3A	intro_EC2		BYTE	"**EC: Program verifies the numbers are in descending order - quits otherwise.", 0
	   20 50 72 6F 67
	   72 61 6D 20 76
	   65 72 69 66 69
	   65 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   61 72 65 20 69
	   6E 20 64 65 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 20 2D
	   20 71 75 69 74
	   73 20 6F 74 68
	   65 72 77 69 73
	   65 2E 00
 000000C8 2A 2A 45 43 3A	intro_EC3		BYTE	"**EC: Program handles negative results, and computes/displays B-A, C-A, C-B, C-B-A", 0
	   20 50 72 6F 67
	   72 61 6D 20 68
	   61 6E 64 6C 65
	   73 20 6E 65 67
	   61 74 69 76 65
	   20 72 65 73 75
	   6C 74 73 2C 20
	   61 6E 64 20 63
	   6F 6D 70 75 74
	   65 73 2F 64 69
	   73 70 6C 61 79
	   73 20 42 2D 41
	   2C 20 43 2D 41
	   2C 20 43 2D 42
	   2C 20 43 2D 42
	   2D 41 00
 0000011B 2A 2A 45 43 3A	intro_EC4		BYTE	"**EC: Program calculates and displays quotients/remainders for A/B, A/C, B/C", 0
	   20 50 72 6F 67
	   72 61 6D 20 63
	   61 6C 63 75 6C
	   61 74 65 73 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 73 20 71 75
	   6F 74 69 65 6E
	   74 73 2F 72 65
	   6D 61 69 6E 64
	   65 72 73 20 66
	   6F 72 20 41 2F
	   42 2C 20 41 2F
	   43 2C 20 42 2F
	   43 00
 00000168 45 6E 74 65 72	prompt_Intro	BYTE	"Enter 3 numbers in descending order (A > B > C), and I'll show you the sums and differences.", 0
	   20 33 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   20 28 41 20 3E
	   20 42 20 3E 20
	   43 29 2C 20 61
	   6E 64 20 49 27
	   6C 6C 20 73 68
	   6F 77 20 79 6F
	   75 20 74 68 65
	   20 73 75 6D 73
	   20 61 6E 64 20
	   64 69 66 66 65
	   72 65 6E 63 65
	   73 2E 00

				; variables holding prompts to retrieve user numbers
 000001C5 46 69 72 73 74	prompt_int_A	BYTE	"First number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000001D4 53 65 63 6F 6E	prompt_int_B	BYTE	"Second number: ", 0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001E4 54 68 69 72 64	prompt_int_C	BYTE	"Third number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00

				; variables to hold user input numbers
 000001F3 00000000		int_A			DWORD	?		  
 000001F7 00000000		int_B			DWORD	?		  
 000001FB 00000000		int_C			DWORD	?		 

				; variables to store arithetic of input
 000001FF 00000000		result_AplusB	DWORD	?		  
 00000203 00000000		result_AminusB	DWORD	?		  
 00000207 00000000		result_AplusC	DWORD	?		  
 0000020B 00000000		result_AminusC	DWORD	?		
 0000020F 00000000		result_BplusC	DWORD	?		  
 00000213 00000000		result_BminusC	DWORD	?
 00000217 00000000		result_plusABC	DWORD	?		  


				; variables to use for result calculation message
 0000021B 20 2B 20 00		plus			BYTE	" + ", 0
 0000021F 20 2D 20 00		minus			BYTE	" - ", 0
 00000223 20 3D 20 00		equals			BYTE	" = ", 0

				; Extra Credit variables
 00000227 20			quit_caption	BYTE	" "
 00000228  0D 0A						BYTE	0dh, 0ah
 0000022A  50 72 65 73 73					BYTE	"Press 'Yes' to exit the program or 'No' to continue using it.", 0
	   20 27 59 65 73
	   27 20 74 6F 20
	   65 78 69 74 20
	   74 68 65 20 70
	   72 6F 67 72 61
	   6D 20 6F 72 20
	   27 4E 6F 27 20
	   74 6F 20 63 6F
	   6E 74 69 6E 75
	   65 20 75 73 69
	   6E 67 20 69 74
	   2E 00

 00000268 45 52 52 4F 52	order_err_prmpt	BYTE	"ERROR: You did not put the numbers in descending order - program will exit.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 70
	   75 74 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 6E 20 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 20
	   2D 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   65 78 69 74 2E
	   00

 000002B4 00000000		result_BminusA	DWORD	?		  	  
 000002B8 00000000		result_CminusA	DWORD	?		  
 000002BC 00000000		result_CminusB	DWORD	?
 000002C0 00000000		result_minusCBA	DWORD	?	

 000002C4 20 2F 20 00		divide_sym		BYTE	" / ", 0
 000002C8 20 71 75 6F 74	quotient_msg	BYTE	" quotient: ", 0
	   69 65 6E 74 3A
	   20 00
 000002D4 20 72 65 6D 61	remainder_msg	BYTE	" remainder: ", 0
	   69 6E 64 65 72
	   3A 20 00

 000002E1 00000000		quotient_AdivB	DWORD	?		  
 000002E5 00000000		quotient_AdivC	DWORD	?
 000002E9 00000000		quotient_BdivC	DWORD	?	
 000002ED 00000000		remainder_AdivB	DWORD	?		  
 000002F1 00000000		remainder_AdivC	DWORD	?
 000002F5 00000000		remainder_BdivC	DWORD	?	



				; Goodbye mesage
 000002F9 54 68 61 6E 6B	goodbye			BYTE	"Thanks for using my Basic Logic and Arithmetic Program! Goodbye!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   42 61 73 69 63
	   20 4C 6F 67 69
	   63 20 61 6E 64
	   20 41 72 69 74
	   68 6D 65 74 69
	   63 20 50 72 6F
	   67 72 61 6D 21
	   20 47 6F 6F 64
	   62 79 65 21 00


 00000000			.code
 00000000			main PROC

				; -------------------------
				; INTRODUCTION - Displays program information to include extra credit info
				; -------------------------
 00000000  BA 00000000 R		mov		EDX, OFFSET intro_title
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	Crlf

 0000000F  BA 00000044 R		mov		EDX, OFFSET intro_EC1 ; first EC statement
 00000014  E8 00000000 E		call	WriteString
 00000019  E8 00000000 E		call	Crlf

 0000001E  BA 0000007A R		mov		EDX, OFFSET intro_EC2 ; second EC statement
 00000023  E8 00000000 E		call	WriteString
 00000028  E8 00000000 E		call	Crlf

 0000002D  BA 000000C8 R		mov		EDX, OFFSET intro_EC3 ; third EC statement
 00000032  E8 00000000 E		call	WriteString
 00000037  E8 00000000 E		call	Crlf

 0000003C  BA 0000011B R		mov		EDX, OFFSET intro_EC4 ; fourth EC statement
 00000041  E8 00000000 E		call	WriteString
 00000046  E8 00000000 E		call	Crlf
 0000004B  E8 00000000 E		call	Crlf

				; -------------------------
				; GET THE DATA - Asks the user for three numbers in descending order and stores data into variables.  
				;		If the numbers are not descending, program will close
				; -------------------------
 00000050  BA 00000168 R		mov		EDX, OFFSET prompt_Intro
 00000055  E8 00000000 E		call	WriteString
 0000005A  E8 00000000 E		call	Crlf

					; Gather first number
 0000005F  BA 000001C5 R		mov		EDX, OFFSET prompt_int_A
 00000064  E8 00000000 E		call	WriteString
 00000069  E8 00000000 E		call	ReadDEC
 0000006E  A3 000001F3 R		mov		int_A, EAX

					; Gather second number
 00000073  BA 000001D4 R		mov		EDX, OFFSET prompt_int_B
 00000078  E8 00000000 E		call	WriteString
 0000007D  E8 00000000 E		call	ReadDEC
 00000082  A3 000001F7 R		mov		int_B, EAX

					; **Extra Credit - verifies the numbers are in descending order
 00000087  A1 000001F7 R		mov		EAX, int_B
 0000008C  39 05 000001F3 R		cmp		int_A, EAX
 00000092  A3 000001F7 R		mov		int_B, EAX
 00000097  0F 82 0000051A		JC		get_out_descending ; jumps to exit section if there is a carry flag (greater than preceding number)
 0000009D  0F 84 00000514		JZ		get_out_descending ; jumps to exit section if there is a zero flag (equal to preceding number)


					; Gather third number
 000000A3  BA 000001E4 R		mov		EDX, OFFSET prompt_int_C
 000000A8  E8 00000000 E		call	WriteString
 000000AD  E8 00000000 E		call	ReadDEC
 000000B2  A3 000001FB R		mov		int_C, EAX
 000000B7  E8 00000000 E		call	Crlf

					; **Extra Credit - verifies the numbers are in descending order
 000000BC  A1 000001FB R		mov		EAX, int_C
 000000C1  39 05 000001F7 R		cmp		int_B, EAX
 000000C7  A3 000001FB R		mov		int_C, EAX
 000000CC  0F 82 000004E5		JC		get_out_descending ; jumps to exit section if there is a carry flag (greater than preceding number)
 000000D2  0F 84 000004DF		JZ		get_out_descending ; jumps to exit section if there is a zero flag (equal to preceding number)

				; -------------------------
				; CALCULATE THE VALUES (A+B, A-B, A+C, A-C, B+C, B-C, A+B+C)
				;		Goes through and uses arithmetic operations to calculate and store the above equations.
				; -------------------------
 000000D8  8B 1D 000001F3 R		mov		EBX, int_A
 000000DE  03 1D 000001F7 R		add		EBX, int_B
 000000E4  89 1D 000001FF R		mov		result_AplusB, EBX	; A + B

 000000EA  8B 1D 000001F3 R		mov		EBX, int_A
 000000F0  2B 1D 000001F7 R		sub		EBX, int_B
 000000F6  89 1D 00000203 R		mov		result_AminusB, EBX	; A - B

 000000FC  8B 1D 000001F3 R		mov		EBX, int_A
 00000102  03 1D 000001FB R		add		EBX, int_C
 00000108  89 1D 00000207 R		mov		result_AplusC, EBX	; A + C

 0000010E  8B 1D 000001F3 R		mov		EBX, int_A
 00000114  2B 1D 000001FB R		sub		EBX, int_C
 0000011A  89 1D 0000020B R		mov		result_AminusC, EBX	; A - C

 00000120  8B 1D 000001F7 R		mov		EBX, int_B
 00000126  03 1D 000001FB R		add		EBX, int_C
 0000012C  89 1D 0000020F R		mov		result_BplusC, EBX	; B + C

 00000132  8B 1D 000001F7 R		mov		EBX, int_B
 00000138  2B 1D 000001FB R		sub		EBX, int_C
 0000013E  89 1D 00000213 R		mov		result_BminusC, EBX	; B - C

 00000144  8B 1D 000001FF R		mov		EBX, result_AplusB
 0000014A  03 1D 000001FB R		add		EBX, int_C
 00000150  89 1D 00000217 R		mov		result_plusABC, EBX	; A + B + C

				; -------------------------	
				; **Extra Credit: CALCULATE THE VALUES (B-A, C-A, C-B, C-B-A)
				;		Goes through and uses arithmetic operations to calculate and store the above equations.
				; -------------------------	
 00000156  8B 1D 000001F7 R		mov		EBX, int_B
 0000015C  2B 1D 000001F3 R		sub		EBX, int_A
 00000162  89 1D 000002B4 R		mov		result_BminusA, EBX	; B - A

 00000168  8B 1D 000001FB R		mov		EBX, int_C
 0000016E  2B 1D 000001F3 R		sub		EBX, int_A
 00000174  89 1D 000002B8 R		mov		result_CminusA, EBX	; C - A

 0000017A  8B 1D 000001FB R		mov		EBX, int_C
 00000180  2B 1D 000001F7 R		sub		EBX, int_B
 00000186  89 1D 000002BC R		mov		result_CminusB, EBX	; C - B

 0000018C  8B 1D 000002BC R		mov		EBX, result_CminusB
 00000192  2B 1D 000001F3 R		sub		EBX, int_A
 00000198  89 1D 000002C0 R		mov		result_minusCBA, EBX ; C - B - A

				; -------------------------	
				; **Extra Credit: CALCULATE THE VALUES (A/B, A/C, B/C)
				;		Goes through and uses arithmetic operations to calculate and store the above equations.
				; -------------------------	
 0000019E  A1 000001F3 R		mov		EAX, int_A
 000001A3  BA 00000000			mov		EDX, 0
 000001A8  8B 1D 000001F7 R		mov		EBX, int_B
 000001AE  F7 F3			DIV		EBX
 000001B0  A3 000002E1 R		mov		quotient_AdivB, EAX
 000001B5  89 15 000002ED R		mov		remainder_AdivB, EDX ; A / B

 000001BB  A1 000001F3 R		mov		EAX, int_A
 000001C0  BA 00000000			mov		EDX, 0
 000001C5  8B 1D 000001FB R		mov		EBX, int_C
 000001CB  F7 F3			DIV		EBX
 000001CD  A3 000002E5 R		mov		quotient_AdivC, EAX
 000001D2  89 15 000002F1 R		mov		remainder_AdivC, EDX ; A / C

 000001D8  A1 000001F7 R		mov		EAX, int_B
 000001DD  BA 00000000			mov		EDX, 0
 000001E2  8B 1D 000001FB R		mov		EBX, int_C
 000001E8  F7 F3			DIV		EBX
 000001EA  A3 000002E9 R		mov		quotient_BdivC, EAX
 000001EF  89 15 000002F5 R		mov		remainder_BdivC, EDX ; B / C

				; -------------------------	
				; DISPLAY THE RESULTS - Writes out to the console the required information for the specifications of the class.
				;		This will return all addition, subtraction and division data.
				; -------------------------	

					; A + B
 000001F5  A1 000001F3 R		mov		EAX, int_A
 000001FA  E8 00000000 E		call	WriteDec
 000001FF  BA 0000021B R		mov		EDX, OFFSET plus
 00000204  E8 00000000 E		call	WriteString
 00000209  A1 000001F7 R		mov		EAX, int_B
 0000020E  E8 00000000 E		call	WriteDec			; Num operator Num

 00000213  BA 00000223 R		mov		EDX, OFFSET equals
 00000218  E8 00000000 E		call	WriteString
 0000021D  A1 000001FF R		mov		EAX, result_AplusB
 00000222  E8 00000000 E		call	WriteDec
 00000227  E8 00000000 E		call	Crlf				; Equals and result

					; A - B
 0000022C  A1 000001F3 R		mov		EAX, int_A
 00000231  E8 00000000 E		call	WriteDec
 00000236  BA 0000021F R		mov		EDX, OFFSET minus
 0000023B  E8 00000000 E		call	WriteString
 00000240  A1 000001F7 R		mov		EAX, int_B
 00000245  E8 00000000 E		call	WriteDec			; Num operator Num

 0000024A  BA 00000223 R		mov		EDX, OFFSET equals
 0000024F  E8 00000000 E		call	WriteString
 00000254  A1 00000203 R		mov		EAX, result_AminusB
 00000259  E8 00000000 E		call	WriteDec
 0000025E  E8 00000000 E		call	Crlf				; Equals and result

					; A + C
 00000263  A1 000001F3 R		mov		EAX, int_A
 00000268  E8 00000000 E		call	WriteDec
 0000026D  BA 0000021B R		mov		EDX, OFFSET plus
 00000272  E8 00000000 E		call	WriteString
 00000277  A1 000001FB R		mov		EAX, int_C
 0000027C  E8 00000000 E		call	WriteDec			; Num operator Num

 00000281  BA 00000223 R		mov		EDX, OFFSET equals
 00000286  E8 00000000 E		call	WriteString
 0000028B  A1 00000207 R		mov		EAX, result_AplusC
 00000290  E8 00000000 E		call	WriteDec
 00000295  E8 00000000 E		call	Crlf				; Equals and result

					; A - C
 0000029A  A1 000001F3 R		mov		EAX, int_A
 0000029F  E8 00000000 E		call	WriteDec
 000002A4  BA 0000021F R		mov		EDX, OFFSET minus
 000002A9  E8 00000000 E		call	WriteString
 000002AE  A1 000001FB R		mov		EAX, int_C
 000002B3  E8 00000000 E		call	WriteDec			; Num operator Num

 000002B8  BA 00000223 R		mov		EDX, OFFSET equals
 000002BD  E8 00000000 E		call	WriteString
 000002C2  A1 0000020B R		mov		EAX, result_AminusC
 000002C7  E8 00000000 E		call	WriteDec
 000002CC  E8 00000000 E		call	Crlf				; Equals and result

					; B + C
 000002D1  A1 000001F7 R		mov		EAX, int_B
 000002D6  E8 00000000 E		call	WriteDec
 000002DB  BA 0000021B R		mov		EDX, OFFSET plus
 000002E0  E8 00000000 E		call	WriteString
 000002E5  A1 000001FB R		mov		EAX, int_C
 000002EA  E8 00000000 E		call	WriteDec			; Num operator Num

 000002EF  BA 00000223 R		mov		EDX, OFFSET equals
 000002F4  E8 00000000 E		call	WriteString
 000002F9  A1 0000020F R		mov		EAX, result_BplusC
 000002FE  E8 00000000 E		call	WriteDec
 00000303  E8 00000000 E		call	Crlf				; Equals and result

					; B - C
 00000308  A1 000001F7 R		mov		EAX, int_B
 0000030D  E8 00000000 E		call	WriteDec
 00000312  BA 0000021F R		mov		EDX, OFFSET minus
 00000317  E8 00000000 E		call	WriteString
 0000031C  A1 000001FB R		mov		EAX, int_C
 00000321  E8 00000000 E		call	WriteDec			; Num operator Num

 00000326  BA 00000223 R		mov		EDX, OFFSET equals
 0000032B  E8 00000000 E		call	WriteString
 00000330  A1 00000213 R		mov		EAX, result_BminusC
 00000335  E8 00000000 E		call	WriteDec
 0000033A  E8 00000000 E		call	Crlf				; Equals and result

					; A + B + C
 0000033F  A1 000001F3 R		mov		EAX, int_A
 00000344  E8 00000000 E		call	WriteDec
 00000349  BA 0000021B R		mov		EDX, OFFSET plus
 0000034E  E8 00000000 E		call	WriteString
 00000353  A1 000001F7 R		mov		EAX, int_B
 00000358  E8 00000000 E		call	WriteDec			; Num operator Num

 0000035D  BA 0000021B R		mov		EDX, OFFSET plus
 00000362  E8 00000000 E		call	WriteString
 00000367  A1 000001FB R		mov		EAX, int_C
 0000036C  E8 00000000 E		call	WriteDec			; Additional operator and num

 00000371  BA 00000223 R		mov		EDX, OFFSET equals
 00000376  E8 00000000 E		call	WriteString
 0000037B  A1 00000217 R		mov		EAX, result_plusABC
 00000380  E8 00000000 E		call	WriteDec
 00000385  E8 00000000 E		call	Crlf
 0000038A  E8 00000000 E		call	Crlf				; Equals and result


					; **Extra Credit: Display the negative results  

					; B-A
 0000038F  A1 000001F7 R		mov		EAX, int_B
 00000394  E8 00000000 E		call	WriteDec
 00000399  BA 0000021F R		mov		EDX, OFFSET minus
 0000039E  E8 00000000 E		call	WriteString
 000003A3  A1 000001F3 R		mov		EAX, int_A
 000003A8  E8 00000000 E		call	WriteDec			; Num operator Num

 000003AD  BA 00000223 R		mov		EDX, OFFSET equals
 000003B2  E8 00000000 E		call	WriteString
 000003B7  A1 000002B4 R		mov		EAX, result_BminusA	; Equals and result
 000003BC  E8 00000000 E		call	WriteInt
 000003C1  E8 00000000 E		call	Crlf

					; C-A
 000003C6  A1 000001FB R		mov		EAX, int_C
 000003CB  E8 00000000 E		call	WriteDec
 000003D0  BA 0000021F R		mov		EDX, OFFSET minus
 000003D5  E8 00000000 E		call	WriteString
 000003DA  A1 000001F3 R		mov		EAX, int_A
 000003DF  E8 00000000 E		call	WriteDec			; Num operator Num

 000003E4  BA 00000223 R		mov		EDX, OFFSET equals
 000003E9  E8 00000000 E		call	WriteString
 000003EE  A1 000002B8 R		mov		EAX, result_CminusA
 000003F3  E8 00000000 E		call	WriteInt
 000003F8  E8 00000000 E		call	Crlf				; Equals and result

					; C-B
 000003FD  A1 000001FB R		mov		EAX, int_C
 00000402  E8 00000000 E		call	WriteDec
 00000407  BA 0000021F R		mov		EDX, OFFSET minus
 0000040C  E8 00000000 E		call	WriteString
 00000411  A1 000001F7 R		mov		EAX, int_B
 00000416  E8 00000000 E		call	WriteDec			; Num operator Num

 0000041B  BA 00000223 R		mov		EDX, OFFSET equals
 00000420  E8 00000000 E		call	WriteString
 00000425  A1 000002BC R		mov		EAX, result_CminusB
 0000042A  E8 00000000 E		call	WriteInt
 0000042F  E8 00000000 E		call	Crlf				; Equals and result

					; C-B-A
 00000434  A1 000001FB R		mov		EAX, int_C
 00000439  E8 00000000 E		call	WriteDec
 0000043E  BA 0000021F R		mov		EDX, OFFSET minus
 00000443  E8 00000000 E		call	WriteString
 00000448  A1 000001F7 R		mov		EAX, int_B
 0000044D  E8 00000000 E		call	WriteDec			; Num operator Num

 00000452  BA 0000021F R		mov		EDX, OFFSET minus
 00000457  E8 00000000 E		call	WriteString
 0000045C  A1 000001F3 R		mov		EAX, int_A
 00000461  E8 00000000 E		call	WriteDec			; Additional operator and Num

 00000466  BA 00000223 R		mov		EDX, OFFSET equals
 0000046B  E8 00000000 E		call	WriteString
 00000470  A1 000002C0 R		mov		EAX, result_minusCBA
 00000475  E8 00000000 E		call	WriteInt
 0000047A  E8 00000000 E		call	Crlf
 0000047F  E8 00000000 E		call	Crlf				; Equals and result

					; **Extra Credit: Display the division results  

					; A / B
 00000484  A1 000001F3 R		mov		EAX, int_A
 00000489  E8 00000000 E		call	WriteDec
 0000048E  BA 000002C4 R		mov		EDX, OFFSET divide_sym
 00000493  E8 00000000 E		call	WriteString
 00000498  A1 000001F7 R		mov		EAX, int_B
 0000049D  E8 00000000 E		call	WriteDec			; Num operator Num

 000004A2  BA 00000223 R		mov		EDX, OFFSET equals
 000004A7  E8 00000000 E		call	WriteString			; Equals

 000004AC  BA 000002C8 R		mov		EDX, OFFSET quotient_msg 
 000004B1  E8 00000000 E		call	WriteString
 000004B6  A1 000002E1 R		mov		EAX, quotient_AdivB
 000004BB  E8 00000000 E		call	WriteDec			; Quotient

 000004C0  BA 000002D4 R		mov		EDX, OFFSET remainder_msg
 000004C5  E8 00000000 E		call	WriteString
 000004CA  A1 000002ED R		mov		EAX, remainder_AdivB
 000004CF  E8 00000000 E		call	WriteDec			
 000004D4  E8 00000000 E		call	Crlf				; Remainder

					; A / C
 000004D9  A1 000001F3 R		mov		EAX, int_A
 000004DE  E8 00000000 E		call	WriteDec
 000004E3  BA 000002C4 R		mov		EDX, OFFSET divide_sym
 000004E8  E8 00000000 E		call	WriteString
 000004ED  A1 000001FB R		mov		EAX, int_C
 000004F2  E8 00000000 E		call	WriteDec			; Num operator Num

 000004F7  BA 00000223 R		mov		EDX, OFFSET equals
 000004FC  E8 00000000 E		call	WriteString			; Equals

 00000501  BA 000002C8 R		mov		EDX, OFFSET quotient_msg 
 00000506  E8 00000000 E		call	WriteString
 0000050B  A1 000002E5 R		mov		EAX, quotient_AdivC
 00000510  E8 00000000 E		call	WriteDec			; Quotient

 00000515  BA 000002D4 R		mov		EDX, OFFSET remainder_msg 
 0000051A  E8 00000000 E		call	WriteString
 0000051F  A1 000002F1 R		mov		EAX, remainder_AdivC
 00000524  E8 00000000 E		call	WriteDec
 00000529  E8 00000000 E		call	Crlf				; Remainder

					; B / C
 0000052E  A1 000001F7 R		mov		EAX, int_B
 00000533  E8 00000000 E		call	WriteDec
 00000538  BA 000002C4 R		mov		EDX, OFFSET divide_sym
 0000053D  E8 00000000 E		call	WriteString
 00000542  A1 000001FB R		mov		EAX, int_C
 00000547  E8 00000000 E		call	WriteDec			; Num operator Num

 0000054C  BA 00000223 R		mov		EDX, OFFSET equals
 00000551  E8 00000000 E		call	WriteString			; Equals

 00000556  BA 000002C8 R		mov		EDX, OFFSET quotient_msg
 0000055B  E8 00000000 E		call	WriteString
 00000560  A1 000002E9 R		mov		EAX, quotient_BdivC
 00000565  E8 00000000 E		call	WriteDec			; Quotient

 0000056A  BA 000002D4 R		mov		EDX, OFFSET remainder_msg
 0000056F  E8 00000000 E		call	WriteString
 00000574  A1 000002F5 R		mov		EAX, remainder_BdivC
 00000579  E8 00000000 E		call	WriteDec
 0000057E  E8 00000000 E		call	Crlf
 00000583  E8 00000000 E		call	Crlf				; Remainder


				; -------------------------	
				; **Extra Credit: Ask if Want to Continue - Uses the MsgBoxAsk procedure to determine if the user wants
				;		to continue by asking them to answer yes or no. The no value will generate an unsigned carry flag, 
				;		which will trigger the conditional jump. 
				; -------------------------	
 00000588  BB 00000000			mov		ebx, 0
 0000058D  BA 00000227 R		mov		edx, OFFSET quit_caption
 00000592  E8 00000000 E		call	MsgBoxAsk			
 00000597  83 F8 07			cmp		eax, IDNO

 0000059A  72 05			JC		get_out				; jumps to get out section of code if there is an unsigned carry (which occurs if user asks to leave)

					
					Invoke	main				; if user doesn't jumpt to get out section, the program will be invoke and it will start from top
 0000059C  E8 FFFFFA5F	   *	    call   main

				; -------------------------		
				; SAY GOODBYE - Closing portion of the program. Has two ways to close 1) because user didn't enter in numbers 
				;		in descending order or 2) because they chose to leave the program. Both are traveled to by conditional jumps.
				; -------------------------	

				; To execute if getting out with no errors
 000005A1			get_out:
 000005A1  BA 000002F9 R		mov		EDX, OFFSET goodbye
 000005A6  E8 00000000 E		call	WriteString
 000005AB  E8 00000000 E		call	Crlf
					Invoke	ExitProcess,0		; exit to operating system
 000005B0  6A 00	   *	    push   +000000000h
 000005B2  E8 00000000 E   *	    call   ExitProcess

				; To execute if getting out with issue (not descending input)
 000005B7			get_out_descending:
 000005B7  BA 00000268 R		mov		EDX, OFFSET order_err_prmpt
 000005BC  E8 00000000 E		call	WriteString
 000005C1  E8 00000000 E		call	Crlf
 000005C6  E8 00000000 E		call	Crlf
 000005CB  BA 000002F9 R		mov		EDX, OFFSET goodbye
 000005D0  E8 00000000 E		call	WriteString
 000005D5  E8 00000000 E		call	Crlf
					Invoke	ExitProcess,0		; exit to operating system
 000005DA  6A 00	   *	    push   +000000000h
 000005DC  E8 00000000 E   *	    call   ExitProcess

 000005E1			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30038.1	    07/03/21 11:45:18
<Project 1 - Basic Logic and Arithmetic Program     (Proj1_B  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000033A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005E1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000005E1 Public STDCALL
  get_out  . . . . . . . . . . .	L Near	 000005A1 _TEXT	
  get_out_descending . . . . . .	L Near	 000005B7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divide_sym . . . . . . . . . . .	Byte	 000002C4 _DATA	
equals . . . . . . . . . . . . .	Byte	 00000223 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000002F9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_A  . . . . . . . . . . . . .	DWord	 000001F3 _DATA	
int_B  . . . . . . . . . . . . .	DWord	 000001F7 _DATA	
int_C  . . . . . . . . . . . . .	DWord	 000001FB _DATA	
intro_EC1  . . . . . . . . . . .	Byte	 00000044 _DATA	
intro_EC2  . . . . . . . . . . .	Byte	 0000007A _DATA	
intro_EC3  . . . . . . . . . . .	Byte	 000000C8 _DATA	
intro_EC4  . . . . . . . . . . .	Byte	 0000011B _DATA	
intro_title  . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 0000021F _DATA	
order_err_prmpt  . . . . . . . .	Byte	 00000268 _DATA	
plus . . . . . . . . . . . . . .	Byte	 0000021B _DATA	
prompt_Intro . . . . . . . . . .	Byte	 00000168 _DATA	
prompt_int_A . . . . . . . . . .	Byte	 000001C5 _DATA	
prompt_int_B . . . . . . . . . .	Byte	 000001D4 _DATA	
prompt_int_C . . . . . . . . . .	Byte	 000001E4 _DATA	
quit_caption . . . . . . . . . .	Byte	 00000227 _DATA	
quotient_AdivB . . . . . . . . .	DWord	 000002E1 _DATA	
quotient_AdivC . . . . . . . . .	DWord	 000002E5 _DATA	
quotient_BdivC . . . . . . . . .	DWord	 000002E9 _DATA	
quotient_msg . . . . . . . . . .	Byte	 000002C8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder_AdivB  . . . . . . . .	DWord	 000002ED _DATA	
remainder_AdivC  . . . . . . . .	DWord	 000002F1 _DATA	
remainder_BdivC  . . . . . . . .	DWord	 000002F5 _DATA	
remainder_msg  . . . . . . . . .	Byte	 000002D4 _DATA	
result_AminusB . . . . . . . . .	DWord	 00000203 _DATA	
result_AminusC . . . . . . . . .	DWord	 0000020B _DATA	
result_AplusB  . . . . . . . . .	DWord	 000001FF _DATA	
result_AplusC  . . . . . . . . .	DWord	 00000207 _DATA	
result_BminusA . . . . . . . . .	DWord	 000002B4 _DATA	
result_BminusC . . . . . . . . .	DWord	 00000213 _DATA	
result_BplusC  . . . . . . . . .	DWord	 0000020F _DATA	
result_CminusA . . . . . . . . .	DWord	 000002B8 _DATA	
result_CminusB . . . . . . . . .	DWord	 000002BC _DATA	
result_minusCBA  . . . . . . . .	DWord	 000002C0 _DATA	
result_plusABC . . . . . . . . .	DWord	 00000217 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
